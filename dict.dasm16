;----------------------------------------------------------------
; struct handle *dict_get(struct handle *dict, struct handle *key)
; return x: struct handle *value or 0
;----------------------------------------------------------------
:dict_get
	set push, 2
	set push, 0
	jsr preamble

	set push, [z + 11]
	set push, [z + 10]
	set push, dict__find__by_key
	jsr array_find

	ifn x, -1
		set pc, dict_get__value_from_index

	set x, 0
	jsr postamble

:dict_get__value_from_index
	set i, [z + 11]	; struct handle *dict
	sti i, [i]		; struct dict *
	add i, x		; item[x] = struct handle *item

	set i, [i]		; struct handle *item
	set i, [i]		; struct list *kv_tuple

	set x, [i + DICT_ITEM_VALUE]
	jsr postamble

;----------------------------------------------------------------
; int16 dict__find__by_key(struct handle *tuple, struct handle *search_key)
; return x: compare result for tuple.key and search_key
;----------------------------------------------------------------
:dict__find__by_key
	set push, 2
	set push, 0
	jsr preamble

	set a, [z + 11]			; struct handle *tuple
	set a, [a]				; struct tuple *

	set push, [a +  DICT_ITEM_KEY]	; struct handle *key
	set push, [z + 10]
	jsr val_cmp

	jsr postamble

;----------------------------------------------------------------
; void dict_set(struct handle *dict, struct handle *key, struct handle *value)
;----------------------------------------------------------------
:dict_set
	set push, 3		; sizeof(args)
	set push, 1		; sizeof(refs)
	jsr preamble

	; create item tuple
	set push, 2
	set push, TYPE_TUPLE
	jsr array_create
	set [z+-1], x

	sti i, [x]

	sti [i], [z+11]		; add key to tuple
	set [i], [z+10]		; add value to tuple


	; check if key exists in dict
	set push, [z+12]
	set push, [z+11]
	set push, dict__find__by_key
	jsr array_find

	ifn x, -1
		set pc, dict_set_to_index

	set push, [z+12]
	set push, -1
	set push, [z+-1]
	jsr array_insert

	jsr postamble

:dict_set_to_index
	set a, [z + 12]
	set b, x
	set c, [z+-1]
	jsr array_set

	jsr postamble

;----------------------------------------------------------------
; struct handle *dict_del(struct handle *dict, struct handle *key)
; return x: struct handle *value or 0
;----------------------------------------------------------------
:dict_del
	set push, 2
	set push, 0
	jsr preamble

	set push, [z+11]
	set push, [z+10]
	set push, dict__find__by_key
	jsr array_find

	ifn x, -1
		set pc, dict_del_item_from_index

	set x, 0
	jsr postamble

:dict_del_item_from_index
	set a, [z+11]
	set b, x
	jsr array_del

	jsr postamble

;----------------------------------------------------------------
; struct handle *dict_repr(struct handle *dict)
;----------------------------------------------------------------
:dict_repr
	set push, 1
	set push, 2
	jsr preamble
	
	set y, [z+10]
	
	set push, 10
	set push, TYPE_STRING
	jsr alloc
	set [z+-1], x

	set push, x
	set push, -1
	set push, '{'
	jsr array_insert

	set i, 0					; index
	set b, [y]					; struct list *
	set b, [b]					; list.size

:dict_repr_loop
	ife i, b
		set pc, dict_repr_finish

	ife i, 0
		set pc, dict_repr_skip_comma

	set push, [z+-1]					; struct handle *str
	set push, -1
	set push, ','
	jsr array_insert

:dict_repr_skip_comma
	set x, [y]				; struct dict *
	add x, i				; current item

	set c, [x+1]			; struct handle *tuple
	set x, [c]				; struct tuple *
	set x, [x+1]			; struct handle *key

	set x, [c]				; struct tuple *
	set push, [x+1]
	jsr repr
	set [z+-2], x

	set push, [z+-1]
	set push, [z+-2]
	jsr array_merge
	set [z+-1], x

	set push, [z+-1]
	set push, -1
	set push, ':'
	jsr array_insert

	set x, [c]				; struct tuple *
	set push, [x+2]
	jsr repr
	set [z+-2], x

	set push, [z+-1]
	set push, [z+-2]
	jsr array_merge
	set [z+-1], x

	sti pc, dict_repr_loop
		
:dict_repr_finish
	set push, [z+-1]
	set push, -1
	set push, '}'
	jsr array_insert

	set x, [z+-1]
	jsr postamble
