;----------------------------------------------------------------
; struct handle *realloc(struct handle *handle, uint16 size)
; return pointer to allocated handle or zero if error
;----------------------------------------------------------------
:realloc
	set push, 2
	set push, 0
	jsr preamble

	set c, [z+11]						; struct handle *
	set a, [z+10]						; size

	ifl [c + HANDLE_SIZE], a
		set pc, realloc__grow

	; shrinking is easy
	set [c + HANDLE_SIZE], a	
	set pc, postamble
		
:realloc__grow
	jsr ensure_memory

	; init allocated space
	set i, [heap_free_start]			; first word of allocated memory region
	add a, i							; first word after allocated memory

	set j, [c + HANDLE_PTR]				; first word of old region
	set b, j							; first word after the old region
	add b, [c + HANDLE_SIZE]

:realloc__copy_loop
	ife j, b
		set pc, realloc__zero_loop

	set [i], [j]			            ; default init with zero
	sti pc, realloc__copy_loop
	
:realloc__zero_loop
	ife i, a
		set pc, realloc__remove_from_list

	set [i], 0				            ; default init with zero
	sti pc, realloc__zero_loop

:realloc__remove_from_list
	ife [heap_handle_tail], c
		set pc, realloc__set_handle_values
	
	; remove handle from reserved list
	set b, [heap_handle_head]
	sub b, HANDLE_NEXT

:realloc__remove_from_list__loop
	ife [b + HANDLE_NEXT], c
		set pc, realloc__remove_from_list__break
		
	set b, [b + HANDLE_NEXT]
	set pc, realloc__remove_from_list__loop
	
:realloc__remove_from_list__break
	set [b + HANDLE_NEXT], [c + HANDLE_NEXT]
	
	; append new handle to tail reserved handles list
	set b, [heap_handle_tail]					; store pointer to last item in reserved handles list
	set [heap_handle_tail], c					; set reserved handles tail pointer to point in new handle
	set [b + HANDLE_NEXT], c					; set previous tail's next to point to new handle

:realloc__set_handle_values
    ; initialize handle structure
	set [c + HANDLE_PTR], [heap_free_start]     ; pointer to allocated memory region
	set [c + HANDLE_SIZE], [z+10]				; size of allocated memory region
	set [c + HANDLE_NEXT], 0					; next handle in reserved handles list

	set [heap_free_start], a					; update unallocated heap space pointer

	set x, c									; return pointer to new handle
	set pc, postamble	

;----------------------------------------------------------------
; struct handle *alloc(uint16 size, uint16 type)
; return pointer to allocated handle or zero if error
;----------------------------------------------------------------
:alloc
	set push, 2
	set push, 0
	jsr preamble

	; calculate required heap space
	set a, [z+11]
	add a, SIZEOF_HANDLE

	jsr ensure_memory

	;---------------------------------------
	; handle cleanup
	;---------------------------------------
	add [heap_counter], 1
	ife [heap_counter], HEAP_GC_TRIGGER
		jsr mark

	; try to get recycled handle
	set c, [heap_handle_free]

	; remove handle from free list
	ifn c, 0
		set [heap_handle_free], [c + HANDLE_NEXT]
    ; ...and skip handle allocation
	ifn c, 0							; recycled handle available?
		set pc, alloc__reserve_data		; yes

	set c, [heap_handle_start]			; reserve new handle
	sub c, SIZEOF_HANDLE

	set [heap_handle_start], c

:alloc__reserve_data
	; c points now to new handle structure

	; init allocated space
	set i, [heap_free_start]			; i points to allocated memory region

	set a, i
	add a, [z+11]                       ; a points to first word after allocated memory

:alloc__init_memory
    ; initialize allocated space with all zeros
	ife i, a
		set pc, alloc__finish

	set [i], 0				            ; default init with zero
	sti pc, alloc__init_memory

:alloc__finish
    ; initialize handle structure
	set [c + HANDLE_PTR], [heap_free_start]     ; pointer to allocated memory region
	set [c + HANDLE_SIZE], [z+11]				; size of allocated memory region
	set [c + HANDLE_TYPE], [z+10]				; type of data that is pointed by this handle
	set [c + HANDLE_NEXT], 0					; next handle in reserved handles list

	set [heap_free_start], a					; update unallocated heap space pointer

	; append new handle to reserved handles list
	set b, [heap_handle_tail]					; store pointer to last item in reserved handles list
	set [heap_handle_tail], c					; set reserved handles tail pointer to point in new handle
	set [b + HANDLE_NEXT], c					; set previous tail's next to point to new handle
	
	set x, c									; return pointer to new handle
	set pc, postamble	

;----------------------------------------------------------------
:ensure_memory
; fastcall
;  a: required memory
; return
;  b: available space
;  x: polluted
;----------------------------------------------------------------
	set x, ensure_memory__out_of_memory

:ensure_memory__check
	; calculate space in heap gap
	set b, [heap_handle_start]
	sub b, [heap_free_start]

	ifl b, a						; if available space < required space
		set pc, x

	set pc, pop

:ensure_memory__out_of_memory
	jsr mark
	jsr compact

	set x, recover
	set pc, ensure_memory__check
	
;----------------------------------------------------------------
; void compact()
;----------------------------------------------------------------
:compact
	set push, 0
	set push, 0
	jsr preamble

	set i, HEAP_START

	set a, heap_handle_head			; struct handle *
	sub a, HANDLE_NEXT
	
:compact_loop
	set a, [a + HANDLE_NEXT]
	ife a, 0
		set pc, compact_finish

	set j, [a + HANDLE_PTR]		; copy from

	set b, i			; calculate end pointer
	add b, [a + HANDLE_SIZE]

	set [a + HANDLE_PTR], i

	ife i, j			; if src == dst
		set i, b		; skip copy

:compact_copy_loop
	ife i, b
		set pc, compact_loop
	sti [i], [j]
	set pc, compact_copy_loop

:compact_finish
	set [heap_free_start], i
	set pc, postamble

;----------------------------------------------------------------
; void free_handles()
;----------------------------------------------------------------
:mark
	set push, 0
	set push, 0
	jsr preamble

	; reset handle reservation counter
	set [heap_counter], 0

	set y, z				; y: temp fp

:mark__process_frame
	; i = y - number_of_references
	set i, y 
	sub i, [y + 7]

:mark__loop_references
	ife i, y							; are all references processed?
		set pc, mark__advance

	set push, [i]
	jsr mark_handle
	
	sti pc, mark__loop_references

:mark__advance
	; set y to next frame pointer in call stack
	set y, [y]

	; continue loop if more frames
	ifn y, 0
		set pc, mark__process_frame

	;---------------------------------------
	; done marking,
	; reconstruct reserved and free lists
	;---------------------------------------
	; use j to iterate over reserved handles list
	set i, heap_handle_head			; struct handle *
	set j, [i]
	sub i, HANDLE_NEXT
	
:mark__free_loop
	; this loop 
	; 1) removes marked-flag from marked handles
	; 2) inserts each handle to reserved or free list

	ife j, 0						; if end of list
		set pc, mark__free_loop__break

	ifb [j + HANDLE_TYPE], TYPE_MARKED
		set pc, mark__free_loop__marked

:mark__free_loop__unmarked
	; store pointer to next handle
	set x, [j + HANDLE_NEXT]

	; add item to free list
	set [j + HANDLE_NEXT], [heap_handle_free]	; add to free list
	set [heap_handle_free], j

	; set j to next handle in reserved list
	set j, x

	set pc, mark__free_loop

:mark__free_loop__marked
	; clear marked flag
	xor [j + HANDLE_TYPE], TYPE_MARKED

	; set next pointer in previous reserved handle
	set [i + HANDLE_NEXT], j

	; advance previous handle pointer
	set i, j

	; advance handle pointer
	set j, [j + HANDLE_NEXT]

	set pc, mark__free_loop

:mark__free_loop__break
	set [i + HANDLE_NEXT], 0
	set [heap_handle_tail], i
	set pc, postamble

;----------------------------------------------------------------
; void free_handles__mark(struct handle *item)
; recursively sets the mark bit in item and contained items
;----------------------------------------------------------------
:mark_handle
	; this function uses standard call convention, but optimized implementation
	set x, [sp + 1]						; struct handle *item

	; remove item from stack (preserve rts)
	set [sp], pop
	
	;---------------------------------------
	; return if handle is outside HEAP handles
	;---------------------------------------
	ifl x, [heap_handle_start]
		set pc, pop
	
	ifg x, HEAP_END - SIZEOF_HANDLE
		set pc, pop
	;---------------------------------------

	ifb [x + HANDLE_TYPE], TYPE_MARKED	; return if handle is already marked
		set pc, pop

	bor [x + HANDLE_TYPE], TYPE_MARKED	; mark handle

	; return if handle is not container
;	ifc [x + HANDLE_TYPE], TYPE_CONTROL + TYPE_REFERENCE + TYPE_SUBSCRIPTION + TYPE_TUPLE + TYPE_LIST + TYPE_DICT
	ifc [x + HANDLE_TYPE], TYPE_GROUP_CONTAINER
		set pc, pop

	set push, x
	set push, mark_handle		; map() function for iterate
	jsr array_map

	set pc, pop
