; admiral functions
; format()
; dict dir()
; save(str, item)
; item load(str)
; del(str)

; these defines are only foor mbr
#define FILE_FREE_HEAD			MEM_FLOPPY_START
#define FILE_FREE_TAIL			MEM_FLOPPY_START + 1
#define FILE_DIR_SECTOR			MEM_FLOPPY_START + 2

; all other sectors
#define FILE_NEXT_SECTOR		MEM_FLOPPY_START

;----------------------------------------------------------------
; struct handle *file__dir__read(void)
;----------------------------------------------------------------
:file__dir__read
	;---------------------------------------
	; read mbr
	;---------------------------------------
	jsr file__mbr__read

	;---------------------------------------
	; read directory
	;---------------------------------------
	set push, [FILE_DIR_SECTOR]
	jsr file__read_item_from_sector

	set pc, pop

;----------------------------------------------------------------
; void file__dir__write(struct handle *dir)
;----------------------------------------------------------------
:file__dir__write
	set push, 1
	set push, 1
	jsr preamble
	
	set push, [z+10]
	jsr file__write
	set [z-1], x

	; get first_sector
	set x, [x]
	set push, [x + FILE_HANDLE__FIRST_SECTOR]
	jsr int_to_int16
	set a, x

	;---------------------------------------
	; read mbr
	;---------------------------------------
	jsr file__mbr__read
	set [FILE_DIR_SECTOR], a
	jsr file__mbr__write

	set pc, postamble

;----------------------------------------------------------------
; void file__format()
;----------------------------------------------------------------
:file__format
	set push, 0
	set push, 1
	jsr preamble

	set [FILE_FREE_TAIL], 1439
	set [FILE_DIR_SECTOR], 1

	set i, 0
:file__format__next_sector
	sti [file_current_sector], i
	ife i, 1440
		set i, 0
	set [FILE_NEXT_SECTOR], i
	
	jsr file__write_sector

	ifn i, 0
		set pc, file__format__next_sector

	set push, 0
	set push, TYPE_DICT
	jsr array_create
	set [z-1], x

	set push, 1
	jsr file__open
	
	set push, [z-1]
	jsr file__serialize
	
	jsr file__close

	set pc, postamble
	
;----------------------------------------------------------------
; struct handle *file__deserialize(void)
;----------------------------------------------------------------
:file__deserialize
    set push, 1
    set push, 0
    jsr preamble
    
    set pc, recover
    set pc, postamble

;----------------------------------------------------------------
; void file__serialize(struct handle *item)
;----------------------------------------------------------------
:file__serialize
    set push, 1
    set push, 0
    jsr preamble

    set a, sp					; done.end
    set b, sp

    set push, [z+10]			; put root item to queue

:file__serialize__next_item
	sub b, 1					; take next item in fifo order

	;---------------------------------------
	; write ID
	;---------------------------------------
	set y, [b]					; id == struct handle *
    set push, y
    jsr file__write_word

	;---------------------------------------
	; write TYPE
	;---------------------------------------
	set c, [y + HANDLE_TYPE]
    set push, c 				; type
    jsr file__write_word

	;---------------------------------------
	; write SIZE (actual)
	;---------------------------------------
    set y, [y]                  ; move y to data
 
	set j, [y]					; array size
    ife c, TYPE_FLOAT			; if item is float
	    set j, SIZEOF_FLOAT		; float size

	set push, j
    jsr file__write_word

	;---------------------------------------
	; write DATA
	;---------------------------------------
    set i, y
    ifn c, TYPE_FLOAT
    	add i, 1
    
    add y, j

:file__serialize__data__loop
	ifg i, y					
		ifl sp, b
			set pc, file__serialize__next_item

	ifg i, y
		set pc, postamble

	set push, [i]
	jsr file__write_word

	ifc c, TYPE_GROUP_CONTAINER
		sti pc, file__serialize__data__loop

; here starts the todo insertion loop
    set j, a

:file__serialize__search_item
	sub j, 1
    ife [j], [i]		; match
    	sti pc, file__serialize__data__loop

    ifg j, sp
        set pc, file__serialize__search_item   ; no match

	; no match found
	set push, [i]
	
	sti pc, file__serialize__data__loop
  
;----------------------------------------------------------------
; void save(struct handle *filename, struct handle *root)
;----------------------------------------------------------------
:file__save
    set push, 2
    set push, 2
    jsr preamble

	;---------------------------------------
	; store item to disk
	;---------------------------------------
	set push, [z+10]
	jsr file__write
	set [z-1], x
	
	;---------------------------------------
	; update directory
	;---------------------------------------
	jsr file__dir__read
	set [z-2], x
	
	set push, x
	set push, [z+11]
	jsr dict_get
	
	ife x, 0
		set pc, file__save__update_dir

	set push, x
	jsr file__delete

:file__save__update_dir
	set push, [z-2]
	set push, [z+11]
	set push, [z-1]
	jsr dict_set

	set push, [z-2]
	jsr file__dir__write

    set pc, postamble    

;----------------------------------------------------------------
; struct handle *file__read(struct handle *file_handle)
;----------------------------------------------------------------
:file__read
    set push, 1
    set push, 0
    jsr preamble

	set x, [z+10]		; struct handle *tuple
	set x, [x]			; struct tuple *file_handle

	set push, [x + FILE_HANDLE__FIRST_SECTOR]
	jsr int_to_int16

	set push, x
	jsr file__read_item_from_sector
	
	set pc, postamble

;----------------------------------------------------------------
; struct handle *file__delete(struct handle *file_handle)
;----------------------------------------------------------------
:file__delete
    set push, 1
    set push, 0
    jsr preamble

	jsr file__mbr__read

	set push, [FILE_FREE_TAIL]
	jsr file__read_sector

	set x, [z+10]		; struct handle *tuple
	set x, [x]			; struct tuple *file_handle

	set push, [x + FILE_HANDLE__FIRST_SECTOR]
	jsr int_to_int16

	set [FILE_NEXT_SECTOR], x
	jsr file__write_sector
	
	set pc, postamble

;----------------------------------------------------------------
; struct handle *file__read_item_from_sector(uint16 sector)
;----------------------------------------------------------------
:file__read_item_from_sector
	set x, [sp+1]
	set [sp], pop

	set push, x	
	jsr file__open		
	jsr file__deserialize
	
	set pc, pop

;----------------------------------------------------------------
; struct handle *file__write(struct handle *item)
;----------------------------------------------------------------
:file__write
    set push, 1
    set push, 1
    jsr preamble

	;---------------------------------------
	; read mbr
	;---------------------------------------
	jsr file__mbr__read
	set a, [FILE_FREE_HEAD]					; first sector

	;---------------------------------------
	; write file to free space
	;---------------------------------------
	set push, a
	jsr file__open

	; serialize object
    set push, [z+10]
    jsr file__serialize

	set b, [file_position]					; file length

	;---------------------------------------
	; terminate file and update list of free sectors
	;---------------------------------------
	jsr file__close

	;---------------------------------------
	; return file handle (first_sector, length)
	;---------------------------------------
	set push, 2
	set push, TYPE_TUPLE
	jsr array_create
	set [z-1], x

	set c, [x]

	set push, a					; first_sector
	jsr uint16_to_int
	set [c + 1], x
	
	set push, b					; length
	jsr uint16_to_int
	set [c + 2], x

	set pc, postamble

;----------------------------------------------------------------
:file__open
;----------------------------------------------------------------
	set [file_current_sector], [sp+1]
    jsr file__read_sector

	; initialize position pointers
    set [file_buffer_position], 1
    set [file_position], 0
    
    set [sp], pop
    set pc, pop

;----------------------------------------------------------------
:file__close
;----------------------------------------------------------------
	; store next free sector
	set push, [FILE_NEXT_SECTOR]

	; terminate current sector list
	set [FILE_NEXT_SECTOR], 0
	jsr file__write_sector

	; update mbr
	jsr file__mbr__read	
	set [FILE_FREE_HEAD], pop
	jsr file__mbr__write
	
	set pc, pop

;----------------------------------------------------------------
:file__mbr__read
;----------------------------------------------------------------
    set [file_current_sector], 0
    jsr file__read_sector
	set pc, pop

;----------------------------------------------------------------
:file__mbr__write
;----------------------------------------------------------------
    set [file_current_sector], 0
    jsr file__write_sector
	set pc, pop

;----------------------------------------------------------------
; LOW LEVEL SUBROUTINES
;----------------------------------------------------------------

;----------------------------------------------------------------
:file__write_word
;----------------------------------------------------------------
	ife [file_buffer_position], MEM_FLOPPY_END
        set pc, file__write_word__add_to_buffer

    jsr file__write_sector
    jsr file__next_sector

:file__write_word__add_to_buffer
    set x, [file_buffer_position]
    set [x], [sp+1]

    add [file_buffer_position], 1
    add [file_position], 1
    
	set [sp], pop
    set pc, pop

;----------------------------------------------------------------
:file__read_word
;----------------------------------------------------------------
	ife [file_buffer_position], MEM_FLOPPY_END
		jsr file__next_sector

    set c, [file_buffer_position]
    set [c], c

    add [file_buffer_position], 1
    add [file_position], 1

    set pc, pop

;----------------------------------------------------------------
; void file__write_sector()
;----------------------------------------------------------------
:file__write_sector
    set push, 0
    set push, 0
    jsr preamble

	set a, 3
	set x, [file_current_sector]
	set y, MEM_FLOPPY_START
	hwi [floppy]
	
	set a, 0
:file__write_sector__loop
	hwi [floppy]
	ifn b, 0x0001
		set pc, file__write_sector__loop

    set pc, postamble

;----------------------------------------------------------------
; void file__read_sector()
;----------------------------------------------------------------
:file__read_sector
    set push, 0
    set push, 0
    jsr preamble

	set a, 2

	set x, [file_current_sector]
	set y, MEM_FLOPPY_START
	hwi [floppy]
	
	set a, 0
:file__read_sector__loop
	hwi [floppy]
	ifb b, 0x0003
		set pc, file__read_sector__loop

    set pc, postamble

;----------------------------------------------------------------
:file__next_sector
;----------------------------------------------------------------
    ; get the next sector number
    set [file_current_sector], [MEM_FLOPPY_START]

    ; read the sector to memory buffer
    jsr file__read_sector

    ; reset buffer pointer
    set [file_buffer_position], MEM_FLOPPY_START + 1

    set pc, pop
        
