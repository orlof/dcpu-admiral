;----------------------------------------------------------------
; struct handle *array_create(uint16 len, uint16 type)
;  ugly hack to mimic call conventions
;----------------------------------------------------------------
:array_create
	set push, [sp + 2]		; size
	add [sp], 1
	set push, [sp + 2]		; type
	jsr alloc
	
	set push, x
	
	set x, [x]
	set [x], [sp + 3]
	
	; restore stack
	set x, pop
	set [sp], pop
	set [sp], pop

	set pc, pop

;----------------------------------------------------------------
:array__get
; fastcall
; a: struct handle *
; b: index
; return x: uint16 at specified index or 0
;----------------------------------------------------------------
	jsr array__get_memory_addr
	
	ifn x, 0
		set x, [x]
	
	set pc, pop	

;----------------------------------------------------------------
:array__set
; fastcall
; a: struct handle *
; b: index
; c: item (struct handle * or char)
;----------------------------------------------------------------
	jsr array__get_memory_addr
	
	ife x, 0
		jsr recover
	
	set [x], c

	set pc, pop	

;----------------------------------------------------------------
:array__del
; fastcall
; a: struct handle *
; b: index
;----------------------------------------------------------------
	jsr array__get_memory_addr
	
	ife x, 0
		set pc, recover

	set push, i
	set push, j

	set i, x
	set j, x
	add j, 1
	
	set x, [a]
	sub [x], 1
	add x, [x]

:array__del__loop
	ifg i, x
		set pc, array__del__finish
		
	set [i], [j]
	sti pc, array__del__loop
	
:array__del__finish
	set j, pop
	set i, pop
	set pc, pop

;----------------------------------------------------------------
:array__get_memory_addr
; fastcall
; a: struct handle *array
; b: index
; return x: memory location or 0 for out of bounds
;----------------------------------------------------------------
	set push, a
	
	set a, [a]			; struct array *

	set x, b
	ifb b, 0x8000
		add x, [a]

	ifb x, 0x8000
		set pc, array__get_memory_addr__out_of_bounds

	add x, 1
	ifg x, [a]
		set pc, array__get_memory_addr__out_of_bounds

	add x, a
	
	set a, pop
	set pc, pop

:array__get_memory_addr__out_of_bounds
	set a, pop
	set x, 0
	set pc, pop

;----------------------------------------------------------------
; extern struct handle *array_insert(struct handle *array, uint index, void item)
;----------------------------------------------------------------
:array__insert
	set push, 3
	set push, 0
	jsr preamble

	; calculate index to b
	set a, [z+12]		; struct handle *array
	set c, [a]			; struct array *

	set b, [z+11]		; index

	ifb b, 0x8000		; if index < 0
		add b, [c]		;   index += len

	ifb b, 0x8000		; if index < 0
		set b, 0		;   index = 0

	ifg b, [c]			; if index > len
		set b, [c]		;   index = len

	jsr array__increment_length

	set i, [a]			; realloc has moved the memory
	add i, [i]

	set j, [a]
	add j, [j]
	sub j, 1

	add b, [a]

:array__insert__loop
	ife j, b
		set pc, array__insert__finish
		
	set [i], [j]
	std pc, array__insert__loop
	
:array__insert__finish
	set [i], [z+10]
	jsr postamble

;----------------------------------------------------------------
; extern struct handle *array_insert(struct handle *array, void item)
;----------------------------------------------------------------
; [sp + 3] array
; [sp + 2] item
; [sp + 1] RTS
; [sp + 0] a
:array__append
	set push, a

	set a, [sp + 3]
	jsr array__increment_length

	set a, [a]
	add a, [a]

	set [a], [sp + 2]

	set a, pop
	set x, [sp + 2]
	
	set [sp], pop
	set [sp], pop
	set pc, pop

;----------------------------------------------------------------
; struct handle *array_append_array(struct handle *array, struct handle *array)
;----------------------------------------------------------------
:array__append_array
	set push, 2
	set push, 0
	jsr preamble

	set b, 0

	set a, [z+10]
	set c, [a]
	set c, [c]

:array__append_array__loop
	ife b, c
		set pc, postamble

	jsr array__get
	
	set push, [z+11]
	set push, x
	jsr array__append
	
	add b, 1
	set pc, array__append_array__loop

;----------------------------------------------------------------
:array__increment_length
; fastcall
; a: struct handle *array
;----------------------------------------------------------------	
	set x, [a]
	add [x], 1
	
	ifl [x], [a + HANDLE_SIZE]				; if len < capacity+1
		set pc, pop

	; increase list capacity
	set push, a
	set push, [x]
	add [sp], 9
	jsr realloc

	set pc, pop
	
;----------------------------------------------------------------
; extern struct handle *array_split(struct handle *orig, uint start, uint end)
;----------------------------------------------------------------
:array_split
	set push, 3
	set push, 1
	jsr preamble

	set a, [z+12]
	set b, [a]

	; start index
	set j, [z+11]
	ifu j, 0
		add j, [b]
	ifu j, 0
		sub j, j

	; end index
	set c, [z+10]
	ifu c, 0
		add c, [b]
	ifu c, 0
		sub c, c

	ifa c, [b]
		set c, [b]
		
	ifa j, c
		set j, c

	set y, c
	sub y, j

	set push, y
	set push, [a + HANDLE_TYPE]
	jsr array_create
	set [z+-1], x

	add j, b
	add c, b
	
	set i, [x]
	set [i], y
	
:array_split_loop
	ife j, c
		jsr postamble
	sti [i+1], [j+1]
	set pc, array_split_loop

;----------------------------------------------------------------
; extern struct handle *array_merge(struct handle *left, struct handle *right)
;----------------------------------------------------------------
:array_merge
	set push, 2
	set push, 1
	jsr preamble

	set b, [z+11]		; struct handle *left
	set j, [b]			; struct string *left

	set a, [z+10]		; struct handle *right
	set a, [a]			; struct string *right

	set c, [j]
	add c, [a]
	
	set push, c
	set push, [b + HANDLE_TYPE]
	jsr array_create
	set [z+-1], x		; struct handle *result

	set i, [x]			; struct string *result
	set [i], c			; set length

	set c, j
	add c, [j]

:array_merge_left_loop
	ife j, c
		set pc, array_merge_right
		
	sti [i+1], [j+1]
	set pc, array_merge_left_loop
	
:array_merge_right
	set j, a
	set c, j
	add c, [j]

:array_merge_right_loop
	ife j, c
		jsr postamble
		
	sti [i+1], [j+1]
	set pc, array_merge_right_loop
		
;----------------------------------------------------------------
; uint array_cmp(struct handle *array, struct handle *array, func *comparator)
;----------------------------------------------------------------
:array_cmp
	set push, 3		; sizeof(args)
	set push, 0		; sizeof(vars)
	jsr preamble

	set i, [z+12]	; struct handle *list1
	set i, [i]		; struct list *list1

	set a, i
	add a, [a]		; *tail1
	
	set j, [z+11]	; struct handle *list2
	set j, [j]		; struct list *list2

	set b, j		; i: *head1, j: *head2
	add b, [b]		; *tail2

:array_cmp_loop
	ife i, a
	    set pc, array_cmp_loop_break
	ife j, b
	    set pc, array_cmp_loop_break

	set push, [i]
	set push, [j]
	jsr [z+10]

	ife x, 0
	    sti pc, array_cmp_loop

	jsr postamble

:array_cmp_loop_break
	set x, 0
	ifl i, a
	    set x, 1
	ifl j, b
	    set x, -1

	jsr postamble

;----------------------------------------------------------------
; struct handle *array_repeat(struct handle *array, struct handle *int_times)
;----------------------------------------------------------------
:array_repeat
	set push, 2
	set push, 0
	jsr preamble
	
	set push, [z+10]		; struct handle *int
	jsr int_to_int16

	set c, x			; store multiplier
	ifb c, 0x8000
		set c, 0

	set a, [z+11]			; struct handle *
	set b, [a]			; struct list *

	set y, [b]			; list size
	mul y, c			; space required

	set push, y
	set push, [a + HANDLE_TYPE]
	jsr array_create

	set c, [x]			; struct list *
	set [c], y			; set size

	set j, c
	add j, [c]			; last item

	set i, b

:array_repeat_loop
	ife j, c
		jsr postamble
	ife i, b
		add i, [b]
	std [j], [i]	
	set pc, array_repeat_loop


;----------------------------------------------------------------
; void array_sort(struct handle *array, uint16 *comparator_func)
; comparator_func(a,b) return TRUE if a is before b
;----------------------------------------------------------------
:array_sort
    set push, 2
    set push, 0
    jsr preamble	

    set a, [z+11]
    set b, [z+10]

    set a, [a]	; struct handle **i

    set c, a
    add c, [a]	; struct handle **last


:array_sort_outer
    add a, 1	; struct handle **first
    ife a, c
        jsr postamble

    set y, a	; struct handle **min

    sti j, a	; 

:array_sort_inner
    ifg j, c
        set pc, array_finish_inner

    set push, [j]
    set push, [y]
    jsr b

    ife x, FALSE
        sti pc, array_sort_inner

	set y, j
    sti pc, array_sort_inner
	
:array_finish_inner
    set x, [y]
    set [y], [a]
    set [a], x

    sti pc, array_sort_outer
    
;----------------------------------------------------------------
; struct handle *array_clone(struct handle *original)
;----------------------------------------------------------------
:array_clone
	set push, 1
    set push, 0
    jsr preamble	

    set a, [z+10]
    set i, [a]

	set push, [i]
	set push, [a + HANDLE_TYPE]
	jsr array_create

	set j, [x]
	set c, i
	add c, [i]
	
:array_clone_loop
	ifg i, c
		jsr postamble
		
	set [j], [i]
	sti pc, array_clone_loop

;----------------------------------------------------------------
; void array_map(struct handle *array, *function map)
;----------------------------------------------------------------
; [sp + 4] array
; [sp + 3] func
; [sp + 2] RTS
; [sp + 1] a
; [sp + 0] b
:array_map
	set push, a
	set push, b

	set a, [sp + 4]
	set a, [a]

	set b, a
	add a, [a]
	
:array_map__loop
	add b, 1
	ifg b, a
		set pc, array_map__finish

	set push, [b]
	jsr [sp + 4]
	
	set pc, array_map__loop

:array_map__finish
	set b, pop
	set a, pop
	set [sp], pop
	set [sp], pop
	set pc, pop

;----------------------------------------------------------------
; void array_find(struct handle *array, void item)
;----------------------------------------------------------------
:array_find
	set push, 2
	set push, 0
	jsr preamble
	
	set a, [z + 11]				; struct handle *array
	set b, [z + 10]				; item

	set y, [a]					; struct array *
	sti j, y					; ptr to current item
	
	add y, [y]					; ptr to last item

	set i, 0					; index

:array_find__loop
	set x, -1
	ifg j, y
		set pc, postamble

	set push, [j]
	set push, b
	jsr val_cmp
	
	ifn x, 0
		sti pc, array_find__loop

	set x, i
	jsr postamble
