;----------------------------------------------------------------
; MEMORY LAYOUT
; 29440 bytes is the maximum file size for admiral.bin
; the "correct value for MEM_CODE_SIZE is len(admiral.bin)/2
;----------------------------------------------------------------
#define MEM_CODE_SIZE			0x3980
#define MEM_FLOPPY_SIZE			0x200
#define MEM_SCREEN_SIZE			0x480
#define MEM_STACK_SIZE			0x2000

#define MEM_STACK_END			0x10000
#define MEM_STACK_START			MEM_STACK_END - MEM_STACK_SIZE

#define MEM_SCREEN_END			MEM_STACK_START
#define MEM_SCREEN_START		MEM_SCREEN_END - MEM_SCREEN_SIZE

#define MEM_FLOPPY_END			MEM_SCREEN_START
#define MEM_FLOPPY_START		MEM_FLOPPY_END - MEM_FLOPPY_SIZE

#define MEM_HEAP_START			MEM_CODE_SIZE
#define MEM_HEAP_END			MEM_FLOPPY_START

;----------------------------------------------------------------
; DATA TYPES
;----------------------------------------------------------------
; SYSTEM TYPES
#define TYPE_MARKED			0x8000
#define TYPE_VOID			0x4000
#define TYPE_CONTROL		0x2000
#define TYPE_EXTENSION		0x1000

; INTERNAL SYSTEM TYPES
#define TYPE_NAME           0x0800
#define TYPE_REFERENCE      0x0400
#define TYPE_SUBSCRIPTION   0x0200
#define TYPE_TUPLE_COMMA    0x0100

; USER TYPES
#define TYPE_NONE			0x0080
#define TYPE_FLOAT          0x0040
#define TYPE_INT            0x0020
#define TYPE_BOOL           0x0010

#define TYPE_STR         	0x0008
#define TYPE_TUPLE          0x0004
#define TYPE_LIST           0x0002
#define TYPE_DICT           0x0001

; TYPE GROUPS
#define TYPE_GROUP_CONTAINER		TYPE_CONTROL + TYPE_TUPLE + TYPE_LIST + TYPE_DICT + TYPE_TUPLE_COMMA + TYPE_REFERENCE + TYPE_SUBSCRIPTION
#define TYPE_GROUP_CAN_REFERENCE	TYPE_LIST + TYPE_DICT + TYPE_STR
#define TYPE_GROUP_INTEGER			TYPE_INT + TYPE_BOOL
;define TYPE_GROUP_NON_INTEGER		0xffff - TYPE_GROUP_INTEGER
#define TYPE_GROUP_NON_INTEGER		0xffcf
#define TYPE_GROUP_NUMERIC			TYPE_GROUP_INTEGER + TYPE_FLOAT
#define TYPE_GROUP_ALL				0x3fff

;----------------------------------------------------------------
; PARAMETERS
;----------------------------------------------------------------
#define FONT_COLOR      		0x7000

#define HISTORY_SIZE			5

#define EDIT_BUFFER_SIZE		0x0400
#define HEAP_GC_TRIGGER 		40

#define FLOAT_MANTISSA_WORDS	2
#define FLOAT_PRECISION			(48 * FLOAT_MANTISSA_WORDS) / 10
; 2*16=32 bits for mantissa

;----------------------------------------------------------------
; CONSTANTS
;----------------------------------------------------------------
#define TRUE            1
#define FALSE           0

#define FLOAT_CATEGORY_NAN		0x0000
#define FLOAT_CATEGORY_PINF		0x0400
#define FLOAT_CATEGORY_PNUM		0x0200
#define FLOAT_CATEGORY_PZERO	0x0100
#define FLOAT_CATEGORY_NINF		0x0004
#define FLOAT_CATEGORY_NNUM		0x0002
#define FLOAT_CATEGORY_NZERO	0x0001

#define FLOAT_MASK_POSITIVE 	0x0f00
#define FLOAT_MASK_NEGATIVE 	0x000f

#define SCREEN_COLS     32
#define SCREEN_ROWS     12

#define KEY_BS          0x10
#define KEY_NEWLINE     0x11
#define KEY_INSERT      0x12
#define KEY_DEL         0x13
#define KEY_UP          0x80
#define KEY_DOWN        0x81
#define KEY_LEFT        0x82
#define KEY_RIGHT       0x83
#define KEY_SHIFT       0x90
#define KEY_CTRL        0x91
#define KEY_CTRL_MASK   0x8000
#define KEY_SHIFT_MASK  0x4000
#define KEY_CTRL_X      0x8058
#define KEY_CTRL_C      0x8043

#define SCOPE_MODE_UPDATE   0x0002
#define SCOPE_MODE_INSERT   0x0004

#define FLOPPY__MBR__SECTOR				0x00
#define FLOPPY__MBR__FREE_HEAD			MEM_FLOPPY_START
#define FLOPPY__MBR__FREE_TAIL			MEM_FLOPPY_START + 1
#define FLOPPY__MBR__DIR_HEAD			MEM_FLOPPY_START + 2
#define FLOPPY__MBR__DIR_TAIL			MEM_FLOPPY_START + 3

; data sector definitions
#define FLOPPY__SECTOR__NEXT			MEM_FLOPPY_START
#define FLOPPY__SECTOR__DATA			MEM_FLOPPY_START + 1

#define FLOPPY__STATE__NO_MEDIA				0x00
#define FLOPPY__STATE__READY				0x01
#define FLOPPY__STATE__READY_WP				0x02
#define FLOPPY__STATE__BUSY					0x03

;----------------------------------------------------------------
; DATA STRUCTURE DEFINITIONS
;----------------------------------------------------------------
;----------------------------------------------------------------
; MEMORY
;
; struct handle {
;   uint16 *data;
;   uint16 type;
;   uint16 size;
;   struct handle *next;
; }
#define SIZEOF_HANDLE       4
#define HANDLE_PTR      0
#define HANDLE_TYPE     1
#define HANDLE_SIZE     2
#define HANDLE_NEXT     3

; struct float {
;	uint16 category;
;   uint16 exponent;
;   uint16[] mantissa;
; }
#define SIZEOF_FLOAT		FLOAT_PRECISION + 2

#define FLOAT_CATEGORY		0
#define FLOAT_EXPONENT		1
#define FLOAT_MANTISSA		2

; struct int_value {
;   uint16 len;
;   uint16[] data;
; }

#define INT_LEN     0
#define INT_DATA    1

#define INT_DIVISION_QUOTIENT   1
#define INT_DIVISION_REMAINDER  2

; position of key and value in dict item tuple
#define DICT_ITEM_KEY   1
#define DICT_ITEM_VALUE 2

; struct prototype {
;   void *std;
;   void *nud;
;   void *led;
;   uint16 lbp;
; }
#define PROTOTYPE_STD               0
#define PROTOTYPE_NUD               1
#define PROTOTYPE_LED               2
#define PROTOTYPE_LBP               3

; struct control {
;   uint16 length;
;   uint16 token;
;   [struct handle *value;] # only for return
; }
#define SIZEOF_CONTROL		3
#define CONTROL_SIGNAL      1
#define CONTROL_VALUE       2

; struct reference {
;   uint16 length;
;   struct handle *dict;
;   struct handle *name;
; }
#define REFERENCE_LEFT		1
#define REFERENCE_RIGHT		2

; struct subscription {
;   uint16 length;
;   struct handle *list;
;   struct handle *int;
; }
#define SUBSCRIPTION_LIST   1
#define SUBSCRIPTION_INDEX  2

; screen is not stored in heap -> it can be non-standard
;
; struct screen {
;   uint16 *start;
;   uint16 *end;
;   uint16 *cursor;
; }
#define SIZEOF_SCREEN		3
#define SCREEN__START		0
#define SCREEN__END			1
#define SCREEN__CURSOR		2

; struct inode {
;   struct handle *sector;
;   struct handle *size;
; }
#define SIZEOF__INODE					4
#define INODE__LENGTH					0
#define INODE__SECTOR__HEAD				1
#define INODE__SECTOR__TAIL				2
#define INODE__SIZE						3

; struct lexer {
;   struct handle *string;
;   uint16 target_indent;
;   uint16 current_indent;
;   uint16_token;
;   uint16_start;
;   uint16_end;
; }
#define SIZEOF_LEXER					6
#define LEXER__STR						0
#define LEXER__INDENT_TARGET			1
#define LEXER__INDENT_CURRENT			2
#define LEXER__TOKEN					3
#define LEXER__START					4
#define LEXER__END						5

