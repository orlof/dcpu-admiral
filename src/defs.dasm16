;----------------------------------------------------------------
; MEMORY LAYOUT
; the optimal value for MEM_CODE_SIZE is len(admiral.bin)/2
;----------------------------------------------------------------
#define MEM_STACK_SIZE          0x1000
#define MEM_STACK_END           0x10000
#define MEM_STACK_START         MEM_STACK_END - MEM_STACK_SIZE

#define MEM_HEAP_START          MEM_CODE_END
#define MEM_HEAP_END            MEM_STACK_START

#define MEM_FLOPPY_START        floppy_ram_start
#define MEM_FLOPPY_END          floppy_ram_end

#define MEM_VIDEO_START         video_ram_start
#define MEM_VIDEO_END           video_ram_end

#define REGISTER_A              0xfffa
#define REGISTER_B              0xfffb
#define REGISTER_C              0xfffc
#define REGISTER_X              0xfffd
#define REGISTER_Y              0xfffe
#define REGISTER_Z              0xffff
#define REGISTER_I              0xfff8
#define REGISTER_J              0xfff9

;----------------------------------------------------------------
; DATA TYPES
;----------------------------------------------------------------
; SYSTEM TYPES
#define TYPE_MARKED         0x8000
#define TYPE_VOID           0x4000
#define TYPE_CONTROL        0x2000
#define TYPE_EXTENSION      0x1000

; INTERNAL SYSTEM TYPES
#define TYPE_NAME           0x0800
#define TYPE_REFERENCE      0x0400
#define TYPE_SUBSCRIPTION   0x0200
#define TYPE_TUPLE_COMMA    0x0100

; USER TYPES
#define TYPE_NONE           0x0080
#define TYPE_FLOAT          0x0040
#define TYPE_INT            0x0020
#define TYPE_BOOL           0x0010

#define TYPE_STR            0x0008
#define TYPE_TUPLE          0x0004
#define TYPE_LIST           0x0002
#define TYPE_DICT           0x0001

; TYPE GROUPS
#define TYPE_GROUP_CONTAINER        TYPE_CONTROL + TYPE_TUPLE + TYPE_LIST + TYPE_DICT + TYPE_TUPLE_COMMA + TYPE_REFERENCE + TYPE_SUBSCRIPTION
#define TYPE_GROUP_IMMUTABLE        TYPE_STR + TYPE_INT + TYPE_FLOAT + TYPE_BOOL + TYPE_NONE
#define TYPE_GROUP_RUNNABLE         TYPE_DICT + TYPE_STR
#define TYPE_GROUP_CAN_REFERENCE    TYPE_LIST + TYPE_DICT + TYPE_STR
#define TYPE_GROUP_INTEGER          TYPE_INT + TYPE_BOOL
#define TYPE_GROUP_SELF_AWARE       TYPE_SUBSCRIPTION + TYPE_REFERENCE
;define TYPE_GROUP_NON_INTEGER      0xffff - TYPE_GROUP_INTEGER
#define TYPE_GROUP_NON_INTEGER      0xffcf
#define TYPE_GROUP_NUMERIC          TYPE_GROUP_INTEGER + TYPE_FLOAT
#define TYPE_GROUP_ALL              0x3fff

;----------------------------------------------------------------
; PARAMETERS
;----------------------------------------------------------------
#define FONT_COLOR              0x7000

#define HISTORY_SIZE            5

#define EDIT_BUFFER_SIZE        0x0400
#define HEAP_GC_TRIGGER         256

;----------------------------------------------------------------
; CONSTANTS
;----------------------------------------------------------------
#define TRUE                1
#define FALSE               0

#define SCREEN_COLS         32
#define SCREEN_ROWS         12
#define SCREEN_BLANK_CHAR   0x7020
#define SCREEN_BLANK_PIX    0xf000

#define KEY_BS          0x10
#define KEY_NEWLINE     0x11
#define KEY_INSERT      0x12
#define KEY_DEL         0x13
#define KEY_UP          0x80
#define KEY_DOWN        0x81
#define KEY_LEFT        0x82
#define KEY_RIGHT       0x83
#define KEY_SHIFT       0x90
#define KEY_CTRL        0x91
#define KEY_ALT         0x92
#define KEY_CTRL_MASK   0xffbf
#define KEY_CTRL_X      0x0018
#define KEY_CTRL_Y      0x0019
#define KEY_CTRL_K      0x000b
#define KEY_CTRL_C      0x0003

#define SCOPE_MODE_UPDATE   0x0002
#define SCOPE_MODE_INSERT   0x0004

#define FLOPPY__MBR__SECTOR                0x00
#define FLOPPY__MBR__FREE_HEAD            MEM_FLOPPY_START
#define FLOPPY__MBR__FREE_TAIL            MEM_FLOPPY_START + 1
#define FLOPPY__MBR__DIR_HEAD            MEM_FLOPPY_START + 2
#define FLOPPY__MBR__DIR_TAIL            MEM_FLOPPY_START + 3

; video memory definitions
#define SCREEN_MEM__VIDEO_SIZE          384

; data sector definitions
#define FLOPPY__SECTOR__NEXT            MEM_FLOPPY_START
#define FLOPPY__SECTOR__DATA            MEM_FLOPPY_START + 1

#define FLOPPY__STATE__NO_MEDIA                0x00
#define FLOPPY__STATE__READY                0x01
#define FLOPPY__STATE__READY_WP                0x02
#define FLOPPY__STATE__BUSY                    0x03

#define FLOAT_TYPE_NAN   0x8000
#define FLOAT_TYPE_PINF  -3
#define FLOAT_TYPE_PNUM  -2
#define FLOAT_TYPE_PZERO -1
#define FLOAT_TYPE_DBZ    0
#define FLOAT_TYPE_NZERO  1
#define FLOAT_TYPE_NNUM   2
#define FLOAT_TYPE_NINF   3
;----------------------------------------------------------------
; DATA STRUCTURE DEFINITIONS
;----------------------------------------------------------------
;----------------------------------------------------------------
; MEMORY
;
; struct handle {
;   uint16 *data;
;   uint16 type;
;   uint16 size;
;   struct handle *next;
; }
#define SIZEOF_HANDLE       4
#define HANDLE_PTR      0
#define HANDLE_TYPE     1
#define HANDLE_SIZE     2
#define HANDLE_NEXT     3

; struct float {
;    uint16 size;
;    uint16 type;
;    uint16 exponent;
;    uint16 mantissa high;
;    uint16 mantissa low;
; }

; OFFSETS
#define SIZEOF_FLOAT       4
#define FLOAT_TYPE         0
#define FLOAT_EXP          1
#define FLOAT_HIGH         2
#define FLOAT_LOW          3

#define FLOAT_EXP_BIAS     0x8000

; struct int_value {
;   uint16 len;
;   uint16[] data;
; }

#define INT_LEN     0
#define INT_DATA    1

#define INT_DIVISION_QUOTIENT   1
#define INT_DIVISION_REMAINDER  2

; position of key and value in dict item tuple
#define DICT_ITEM_KEY   1
#define DICT_ITEM_VALUE 2

; struct prototype {
;   void *std;
;   void *nud;
;   void *led;
;   uint16 lbp;
; }
#define PROTOTYPE_STD               0
#define PROTOTYPE_NUD               1
#define PROTOTYPE_LED               2
#define PROTOTYPE_LBP               3

; struct control {
;   uint16 length;
;   uint16 token;
;   [struct handle *value;] # only for return
; }
#define SIZEOF_CONTROL        3
#define CONTROL_SIGNAL      1
#define CONTROL_VALUE       2

#define CONTROL_SIGNAL_RETURN   2
#define CONTROL_SIGNAL_BREAK    4
#define CONTROL_SIGNAL_CONTINUE 8


; struct reference {
;   uint16 length;
;   struct handle *dict;
;   struct handle *name;
; }
#define REFERENCE_LEFT        1
#define REFERENCE_RIGHT        2

; struct subscription {
;   uint16 length;
;   struct handle *list;
;   struct handle *int;
; }
#define SUBSCRIPTION_LIST   1
#define SUBSCRIPTION_INDEX  2

#define REFERENCE_OR_SUBSCRIPTION_ROOT  1
; screen is not stored in heap -> it can be non-standard
;
; struct screen {
;   uint16 *start;
;   uint16 *end;
;   uint16 *cursor;
; }
#define SIZEOF_SCREEN       3
#define SCREEN__START       0
#define SCREEN__END         1
#define SCREEN__CURSOR      2

; struct inode {
;   struct handle *sector;
;   struct handle *size;
; }
#define SIZEOF__INODE                    4
#define INODE__LENGTH                    0
#define INODE__SECTOR__HEAD                1
#define INODE__SECTOR__TAIL                2
#define INODE__SIZE                        3

; struct lexer {
;   struct handle *string;
;   uint16 target_indent;
;   uint16 current_indent;
;   uint16_token;
;   uint16_start;
;   uint16_end;
; }
#define SIZEOF_LEXER                    6
#define LEXER__STR                        0
#define LEXER__INDENT_TARGET            1
#define LEXER__INDENT_CURRENT            2
#define LEXER__TOKEN                    3
#define LEXER__START                    4
#define LEXER__END                        5
