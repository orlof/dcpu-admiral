;----------------------------------------------------------------
; struct handle *list_get(struct handle *list, struct handle *index)
;----------------------------------------------------------------
:list_get
    set push, 2        ; sizeof(args)
    set push, 0        ; sizeof(refs)
    jsr preamble

    set a, [z+11]        ; struct handle *list

    set push, [z+10]        ; struct handle *int
    jsr int_to_int16
    set b, x

    jsr array__get

    set pc, postamble
    
;----------------------------------------------------------------
; void list_set(struct handle *list, struct handle *index, struct handle *item)
;----------------------------------------------------------------
:list_set
    set push, 3        ; sizeof(args)
    set push, 0        ; sizeof(vars)
    jsr preamble

    set a, [z+12]        ; struct handle *list

    set push, [z+11]        ; struct handle *int
    jsr int_to_int16
    set b, x
    
    set c, [z+10]
    jsr array__set

    set pc, postamble

;----------------------------------------------------------------
; void list_del(struct handle *list, struct handle *index)
;----------------------------------------------------------------
:list_del
    set push, 2        ; sizeof(args)
    set push, 0        ; sizeof(refs)
    jsr preamble

    set a, [z+11]        ; struct handle *list
    ifc [a + HANDLE_TYPE], TYPE_LIST
        jsr recover
        #doc Cannot delete, not a container

    set push, [z+10]    ; struct handle *int
    jsr int_to_int16
    set b, x

    jsr array__del

    set pc, postamble
    
;----------------------------------------------------------------
; uint list_cmp(struct handle *left, struct handle *right)
;----------------------------------------------------------------
:list_cmp
    set push, [sp]
    set [sp + 1], val_cmp
    set pc, array_cmp

;----------------------------------------------------------------
; struct handle *list_repr(struct handle *list, void *callback)
;----------------------------------------------------------------
:list_repr
    set push, 2
    set push, 1
    jsr preamble
    
    set y, [z+11]
    
    ife [y + HANDLE_TYPE], TYPE_TUPLE
        set c, '('
    ife [y + HANDLE_TYPE], TYPE_LIST
        set c, '['
    jsr [z+10]

    set i, 0                    ; index
    set b, [y]                    ; struct list *
    set b, [b]                    ; list.size

:list_repr_loop
    ife i, b
        set pc, list_repr_finish

    ife i, 0
        set pc, list_repr_skip_comma

    set c, ','
    jsr [z+10]

:list_repr_skip_comma
    set x, [y]                ; struct list *
    add x, i                ; current item
    
    set push, [x+1]            ; get repr of next item
    set push, [z+10]
    jsr repr
    
    sti pc, list_repr_loop
        
:list_repr_finish
    ife [y + HANDLE_TYPE], TYPE_TUPLE
        set c, ')'
    ife [y + HANDLE_TYPE], TYPE_LIST
        set c, ']'
    jsr [z+10]

    set pc, postamble
