#define SCREEN_COLS         32
#define SCREEN_ROWS         12
#define SCREEN_BLANK_CHAR   0x7020
#define SCREEN_BLANK_PIX    0xf000

;----------------------------------------------------------------
; GLOBAL DISPLAY VARIABLES
;----------------------------------------------------------------
:screen_blank   dat SCREEN_BLANK_CHAR
:screen_cursor  dat 0

; This file represent my first tests to utilize new style of assembler.
; I try to minimize register usage here

;----------------------------------------------------------------
:screen__init
;----------------------------------------------------------------
    set push, 0
    set push, 0
    jsr preamble

    set a, 0
    set b, video_ram_start
    hwi [monitor]

    set pc, postamble

;----------------------------------------------------------------
:screen_toggle_cursor
; fastcall
;----------------------------------------------------------------
    set x, video_ram_start                ; struct screen *cur
    add x, [screen_cursor]
    xor [x], 0xff80                        ; change colors
    set pc, pop

;----------------------------------------------------------------
:screen_move_cursor
; fastcall
;  x [sp+2]
;  y [sp+1]
;----------------------------------------------------------------
    set [screen_cursor], [sp+1]
    mul [screen_cursor], SCREEN_COLS
    add [screen_cursor], [sp+2]

    set [sp], pop    ; remove y
    set [sp], pop    ; remove x
    set pc, pop

;----------------------------------------------------------------
; void screen__scroll(int16 dx, int16 dy)
;----------------------------------------------------------------
:screen__scroll
    set push, 2
    set push, 0
    jsr preamble

    ; exit if no scroll
    ife [z+10], 0
        ife [z+11], 0
            set pc, postamble

    ; limit scrolling amount
    ifa [z+11], SCREEN_COLS
        set [z+11], SCREEN_COLS
    ifu [z+11], -SCREEN_COLS
        set [z+11], -SCREEN_COLS

    ifa [z+10], SCREEN_ROWS
        set [z+10], SCREEN_ROWS
    ifu [z+10], -SCREEN_ROWS
        set [z+10], -SCREEN_ROWS

    ; deduct the memory move direction +1 or -1
    set b, 1
    ifa [z+10], 0
        set b, -1
    ife [z+10], 0
        ifa [z+11], 0
            set b, -1

    ; x = -dx
    set x, 0
    sub x, [z+11]

    ; y = -dy
    set y, 0
    sub y, [z+10]

    ; reset count
    set c, 0

    ; destination memory addr
    set i, video_ram_start

    ; source memory addr
    set j, y
    mli j, SCREEN_COLS
    add j, x
    add j, i

    ife b, 1
        set pc, screen__scroll__loop

    add i, 0x17f
    add j, 0x17f
    add x, SCREEN_COLS-1
    add y, SCREEN_ROWS-1

:screen__scroll__loop
    ; a: temp variable
    ; b: direction -1 or +1 (signed)
    ; c: number of processed memory locations (unsigned)
    ; x: current source column (signed)
    ; y: current source line (signed)
    ; i: current destination memory location (unsigned)
    ; j: current source memory location (unsigned)

    ; clear or copy
    set a, [screen_blank]
    ifa x, -1
        ifu x, SCREEN_COLS
            ifa y, -1
                ifu y, SCREEN_ROWS
                    set a, [j]

    ; set the current location
    set [i], a

    ; advance loop
    add x, b
    add i, b
    add j, b

    add c, 1
    ife c, 0x180
        set pc, postamble

    set a, c
    mod a, SCREEN_COLS
    ifn a, 0
        set pc, screen__scroll__loop

    add y, b

    set a, b
    mli a, SCREEN_COLS

    sub x, a

    set pc, screen__scroll__loop

;----------------------------------------------------------------
; void screen__get(int16 x, int16 y)
;----------------------------------------------------------------
:screen__get
    set x, [sp+1]
    mul x, SCREEN_COLS
    add x, [sp+2]

    set x, [video_ram_start + x]
    and x, 0x007f

    set [sp], pop
    set [sp], pop
    set pc, pop

;----------------------------------------------------------------
; void screen__set(int16 x, int16 y, uint16 char)
;----------------------------------------------------------------
:screen__set
    set x, [sp+2]
    mul x, SCREEN_COLS
    add x, [sp+3]

    bor [sp+1], FONT_COLOR
    set [video_ram_start + x], [sp+1]

    set [sp], pop
    set [sp], pop
    set [sp], pop
    set pc, pop

;----------------------------------------------------------------
; struct handle *screen__get_cursor()
;----------------------------------------------------------------
:screen__get_cursor
    set push, 0
    set push, 1
    jsr preamble

    set push, 2
    set push, TYPE_TUPLE
    jsr array_create
    set [z-1], x

    set push, [screen_cursor]
    mod [sp], SCREEN_COLS
    jsr uint16_to_int
    set b, [z-1]
    set b, [b]
    set [b + 1], x

    set push, [screen_cursor]
    div [sp], SCREEN_COLS
    jsr uint16_to_int
    set b, [z-1]
    set b, [b]
    set [b + 2], x

    set x, [z-1]
    set pc, postamble

;----------------------------------------------------------------
; void cls(void)
;----------------------------------------------------------------
:screen_clear
    set push, a
    set push, b
    set push, i
    set push, j

    set [screen_cursor], 0
    set b, [screen_blank]

    set i, video_ram_start
    set a, video_ram_end

:screen_clear_loop
    set [i], b
    ifl i, a
        sti pc, screen_clear_loop

:screen_clear_finish
    set j, pop
    set i, pop
    set b, pop
    set a, pop

    set pc, pop

;----------------------------------------------------------------
:screen_add_char
; fastcall
; c: character
;----------------------------------------------------------------
    set push, i
    set push, j

    ;set x, 0

    set i, [screen_cursor]

    ife [c + lexer_table], lexer_char_newline
        set pc, add_char_newline

    ife c, KEY_BS
        set pc, add_char_backspace

    set [video_ram_start + i], c
    bor [video_ram_start + i], FONT_COLOR
    sti pc, add_char_scroll

:add_char_newline
    and i, 0xffe0
    add i, SCREEN_COLS

:add_char_scroll
    set [screen_cursor], i

    ifl i, SCREEN_MEM__VIDEO_SIZE
        set pc, add_char_finish

    ;set x, SCREEN_COLS
    sub [screen_cursor], SCREEN_COLS

    set i, video_ram_start
    set j, i
    add j, SCREEN_COLS

:add_char_copy
    sti [i], [j]
    ifl j, video_ram_end
        set pc, add_char_copy

:add_char_clear
    sti [i], [screen_blank]
    ifl i, video_ram_end
        set pc, add_char_clear

:add_char_finish
    set j, pop
    set i, pop

    set pc, pop

:add_char_backspace
    ifn i, 0
        std [video_ram_start+i-1], [screen_blank]

    set [screen_cursor], i
    set pc, add_char_finish
