;----------------------------------------------------------------
; struct handle *scope_get(struct handle *dict, struct handle *key)
; return value from scope or any of the ancestor scopes
;----------------------------------------------------------------
:scope_get
    set push, [sp+2]
    set push, [sp+2]
    jsr dict_get

    ifn x, 0
        set pc, scope_get__finish

    set push, [sp+2]
    set push, STR_UNDERSCORE
    jsr dict_get

    ife x, 0
        set pc, scope_get__finish

    set push, x
    set push, [sp+2]
    jsr scope_get

:scope_get__finish
    set [sp], pop
    set [sp], pop
    set pc, pop

;----------------------------------------------------------------
; void scope_del(struct handle *dict, struct handle *key)
; delete value from scope or closest ancestor scope
;----------------------------------------------------------------
:scope_del
    set push, 2
    set push, 0
    jsr preamble

    set push, [z+11]
    set push, [z+10]
    jsr dict_del

    ifn x, 0
        set pc, postamble

    set push, [z+11]
    set push, STR_UNDERSCORE
    jsr dict_get

    ife x, 0
        jsr recover
        #doc Unknown variable error

    set push, x
    set push, [z + 10]
    jsr scope_del

    set pc, postamble

;----------------------------------------------------------------
; void scope_set(struct handle *dict, struct handle *key, struct handle *value, uint16 mode)
; mode: SCOPE_MODE_UPDATE | SCOPE_MODE_INSERT
;----------------------------------------------------------------
:scope_set
    set push, 4
    set push, 0
    jsr preamble

    set push, [z+13]
    set push, [z+12]
    jsr dict_get

    ifn x, 0
        set pc, scope_set_insert

    set push, [z+13]
    set push, STR_UNDERSCORE
    jsr dict_get

    ife x, 0                            ; no parent found
        set pc, scope_set_no_parent

    ; parent found
    set push, x                            ; call parent
    set push, [z+12]                    ; key
    set push, [z+11]                    ; value
    set push, SCOPE_MODE_UPDATE
    jsr scope_set

    ifn x, 0
        set pc, postamble

:scope_set_no_parent
    ife [z+10], SCOPE_MODE_UPDATE
        set pc, postamble

:scope_set_insert
    set push, [z+13]
    set push, [z+12]
    set push, [z+11]
    jsr dict__set

    set x, 1
    set pc, postamble

;----------------------------------------------------------------
:recover
; fastcall
;----------------------------------------------------------------
    ife [screen_blank], SCREEN_BLANK_PIX
        jsr hires__finish

    set a, pop
    set z, [recovery_fp]
    set sp, [recovery_sp]

    set [current_scope], [global_scope]

    set push, STR_ERROR
    jsr print

    set push, a
    jsr debug

    set c, 10
    jsr screen_add_char

    jsr lexer__get_line
    set push, x
    jsr print

    set c, 10
    jsr screen_add_char

    set pc, interpreter_loop

;----------------------------------------------------------------
; uint val_cmp(struct handle *left, struct handle *right)
;----------------------------------------------------------------
; [sp + 4] struct handle *left
; [sp + 3] struct handle *right
; [sp + 2] RTS
; [sp + 1] a
; [sp + 0] b
:val_cmp
    set push, a
    set push, b

    set a, [sp + 4]
    set b, [sp + 3]

    ; same object?
    sub x, x
    ife a, b
        set pc, cmp__finish

    set push, a
    set push, b
    set push, cmp__finish

    add a, 1
    add b, 1

    ; (int,int),(int,bool),(bool,int),(bool,bool)
    ifb [a], TYPE_BOOL + TYPE_INT
        ifb [b], TYPE_BOOL + TYPE_INT
            set pc, int_cmp

    ; (float,float)
    ifb [a], TYPE_FLOAT
        ifb [b], TYPE_FLOAT
            set pc, float__cmp
    ; (int,float),(bool,float)
    ifb [a], TYPE_BOOL + TYPE_INT
        ifb [b], TYPE_FLOAT
            set pc, float__cmp__int_float
    ; (float,int),(float,bool),
    ifb [a], TYPE_FLOAT
        ifb [b], TYPE_BOOL + TYPE_INT
            set pc, float__cmp__float_int

    ; (str,str),(ident,ident)
    ifb [a], TYPE_STR | TYPE_NAME
        ifb [b], TYPE_STR | TYPE_NAME
            set pc, str_cmp

    ; (tuple,tuple),(list,list),(dict,dict)
    ifb [a], TYPE_LIST + TYPE_TUPLE + TYPE_DICT
        ife [b], [a]
            set pc, list_cmp

    ; compare types
    set x, 0
    ifg [a], [b]
        set x, 1
    ifl [a], [b]
        set x, -1
    add sp, 3

:cmp__finish
    set b, pop
    set a, pop

    set [sp], pop
    set [sp], pop

    set pc, pop

;----------------------------------------------------------------
; struct handle *eval(struct handle *orig)
;----------------------------------------------------------------
:eval
    set push, 1
    set push, 1
    jsr preamble

    set x, [z+10]

    ifb [x + HANDLE_TYPE], TYPE_TUPLE_COMMA
        set [x + HANDLE_TYPE], TYPE_TUPLE

    set a, [x + HANDLE_TYPE]

    ife a, TYPE_NAME
        set pc, eval_name
    ife a, TYPE_TUPLE
        set pc, eval_tuple
    ife a, TYPE_REFERENCE
        set pc, eval_reference
    ife a, TYPE_SUBSCRIPTION
        set pc, eval_subscription

    set pc, postamble

:eval_name
    set push, [current_scope]        ; struct handle *dict
    set push, x                        ; struct handle *name
    jsr scope_get

    ife x, 0
        jsr recover
        #doc Unknown symbol error

    set pc, postamble

:eval_tuple
    set a, x
    set i, 0
    set c, [a]
    set c, [c]

:eval_tuple_loop
    ife i, c
        set pc, eval_tuple_break

    set b, [a]
    add b, i

    set push, [b+1]
    jsr eval

    set [b+1], x

    sti pc, eval_tuple_loop

:eval_tuple_break
    set x, [z+10]
    set pc, postamble

:eval_reference
    set x, [x]

    set push, [x + REFERENCE_LEFT]        ; struct handle *dict or *list
    set push, [x + REFERENCE_RIGHT]        ; struct handle *key or index
    set x, [x + REFERENCE_RIGHT]
    set [x + HANDLE_TYPE], TYPE_STR
    jsr scope_get

    ife x, 0
        jsr recover
        #doc Unknown reference object

    set pc, postamble

:eval_subscription
    set a, [x]                ; struct subscription *
    set b, [a + SUBSCRIPTION_LIST]
    set c, [a + SUBSCRIPTION_INDEX]

    ifb [b + HANDLE_TYPE], TYPE_DICT
        set pc, eval_subscription_dict
    ifb [b + HANDLE_TYPE], TYPE_LIST
        set pc, eval_subscription_array
    ifb [b + HANDLE_TYPE], TYPE_TUPLE
        set pc, eval_subscription_array
    ifb [b + HANDLE_TYPE], TYPE_STR
        set pc, eval_subscription_str

    jsr recover
        #doc Subscribe is allowed only for dict, list, tuple and string

:eval_subscription_dict
    set push, b
    set push, c
    jsr scope_get

    ife x, 0
        jsr recover
        #doc Unknown dict key

    set pc, postamble

:eval_subscription_array
    ifb [c + HANDLE_TYPE], TYPE_INT
        set pc, eval_subscription_array_index
    ifb [c + HANDLE_TYPE], TYPE_TUPLE
        set pc, eval_subscription_array_slice
    jsr recover
    #doc Syntax error in array subscription

:eval_subscription_array_index
    set push, b
    set push, c
    jsr list_get

    ife x, 0
        jsr recover
        #doc Array index out of bounds

    set pc, postamble

:eval_subscription_str_slice
:eval_subscription_array_slice
    set a, [c]            ; struct slice *
    set push, b

    set push, [a+1]        ; start
    jsr int_to_int16
    set push, x

    set push, [a+2]
    jsr int_to_int16
    set push, x

    jsr array_split
    set pc, postamble

:eval_subscription_str
    ifb [c + HANDLE_TYPE], TYPE_INT
        set pc, eval_subscription_str_index
    ifb [c + HANDLE_TYPE], TYPE_TUPLE
        set pc, eval_subscription_str_slice
    jsr recover
    #doc Syntax error in string subscription

:eval_subscription_str_index
    set push, b

    set push, c        ; struct handle *int
    jsr int_to_int16

    ; start index
    set y, [b]
    ifb x, 0x8000
        add x, [y]

    ifa x, [y]
        jsr recover
        #doc Illegal string subscription index
    ife x, [y]
        jsr recover
        #doc Illegal string subscription index
    ifu x, 0
        jsr recover
        #doc Illegal string subscription index

    set push, x        ; start

    add x, 1        ; end
    set push, x
    jsr array_split

    set pc, postamble

;----------------------------------------------------------------
; struct handle *boolean(struct handle *orig)
;----------------------------------------------------------------
:boolean
    set push, 1
    set push, 0
    jsr preamble

    set a, [z+10]
    set b, [a]

    ife a, NONE
        set pc, boolean_false

    set x, [a + HANDLE_TYPE]

    ifb x, TYPE_INT + TYPE_BOOL
        ife [b], 1
            ife [b+1], 0
                set pc, boolean_false

    ifb x, TYPE_FLOAT
        ife [b + FLOAT_TYPE], FLOAT_TYPE_PZERO
            set pc, boolean_false

    ifb x, TYPE_FLOAT
        ife [b + FLOAT_TYPE], FLOAT_TYPE_NZERO
            set pc, boolean_false

    ifc x, TYPE_INT + TYPE_BOOL + TYPE_FLOAT
        ife [b], 0
            set pc, boolean_false

    ife x, TYPE_STR
        set pc, boolean_str

:boolean_true
    set x, BOOL_TRUE
    set pc, postamble

:boolean_false
    set x, BOOL_FALSE
    set pc, postamble


:boolean_str
    set push, a
    set push, STR_FALSE
    jsr str_cmp_ignore_case
    ife x, 0
        set pc, boolean_false
    set pc, boolean_true

;----------------------------------------------------------------
; struct handle *sort(struct handle *iterable, struct handle *reverse)
;----------------------------------------------------------------
:sort
    set push, 2
    set push, 1
    jsr preamble

    set a, [z+11]
    set b, [z+10]

    set push, a
    ifb [a + HANDLE_TYPE], TYPE_STR
        set pc, sort_string
    ifb [a + HANDLE_TYPE], TYPE_TUPLE
        set pc, sort_tuple
    ifb [a + HANDLE_TYPE], TYPE_LIST
        set pc, sort_list

    jsr recover
    #doc Sort is available only for str, tuple and list

:sort_string
    jsr array_clone
    set [z-1], x

    set push, x
    ife b, BOOL_TRUE
        set push, char_reverse_comparator
    ife b, BOOL_FALSE
        set push, char_comparator

    jsr array_sort
    set x, [z-1]
    set pc, postamble

:char_comparator
    set x, FALSE
    ifl [sp+2], [sp+1]
        set x, TRUE

    set i, [sp]
    add sp, 3
    set pc, i

:char_reverse_comparator
    set x, FALSE
    ifg [sp+2], [sp+1]
        set x, TRUE

    set i, [sp]
    add sp, 3
    set pc, i

:sort_tuple
    jsr array_clone
    set push, x

:sort_list
    set [z-1], [sp]
    ife b, BOOL_TRUE
        set push, array_reverse_comparator
    ife b, BOOL_FALSE
        set push, array_comparator

    jsr array_sort
    set x, [z-1]
    set pc, postamble

:array_comparator
    set i, pop
    jsr val_cmp
    set push, i

    ife x, -1
        set pc, array_comparator_true
    set x, FALSE
    set pc, i
:array_comparator_true
    set x, TRUE
    set pc, i

:array_reverse_comparator
    set i, pop
    jsr val_cmp
    set push, i

    ife x, 1
        set pc, array_comparator_true
    set x, FALSE
    set pc, i

;----------------------------------------------------------------
; struct handle *assign(struct handle *left, struct handle *right)
;----------------------------------------------------------------
:assign
    set push, 2
    set push, 2
    jsr preamble

    set a, [z+11]
    set b, [z+10]

    ifb [a + HANDLE_TYPE], TYPE_TUPLE_COMMA
        set [a + HANDLE_TYPE], TYPE_TUPLE

    ifb [a + HANDLE_TYPE], TYPE_NAME | TYPE_STR
        set pc, assign_name
    ifb [a + HANDLE_TYPE], TYPE_TUPLE
        set pc, assign_tuple
    ifb [a + HANDLE_TYPE], TYPE_REFERENCE
        set pc, assign_reference
    ifb [a + HANDLE_TYPE], TYPE_SUBSCRIPTION
        set pc, assign_subscription

    jsr recover
    #doc Illegal left side of subscription

:assign_subscription
    set a, [a]
    set y, [a + SUBSCRIPTION_LIST]
    set c, [a + SUBSCRIPTION_INDEX]

    ifb [y + HANDLE_TYPE], TYPE_DICT
        ifb [c + HANDLE_TYPE], TYPE_GROUP_IMMUTABLE
            set pc, assign_subscription_dict

    ifb [y + HANDLE_TYPE], TYPE_LIST
        ifb [c + HANDLE_TYPE], TYPE_INT
            set pc, assign_subscription_list_int

    jsr recover
    #doc Illegal left side of subscription

:assign_subscription_list_int
    set push, y
    set push, c
    set push, b
    jsr list_set

    set x, b
    set pc, postamble

:assign_subscription_dict
    set push, y
    set push, c
    set pc, assign_reference_or_subscription_dict

:assign_reference
    set a, [a]
    ; vv this supposedly forces all dict ident keys to str
    ; set x, [a + REFERENCE_RIGHT]
    ; ifb [x + HANDLE_TYPE], TYPE_NAME
    ;     set [x + HANDLE_TYPE], TYPE_STR
    ; ^^ this supposedly forces all dict ident keys to str
    set push, [a + REFERENCE_LEFT]
    set push, [a + REFERENCE_RIGHT]
:assign_reference_or_subscription_dict
    set push, b
    jsr dict__set
    set x, b
    set pc, postamble

:assign_name
    set push, [current_scope]
    set push, a
    set push, b
    set push, SCOPE_MODE_INSERT
    jsr scope_set

    set x, b
    set pc, postamble

:assign_tuple
    set i, 0
    set c, [a]
    set c, [c]            ; left side size

    set y, [b]
    ifn [y], c            ; if leftLen != rightLen
        jsr recover
        #doc Wrong number of values to unpack

:assign_tuple_loop
    ife i, c
        set pc, assign_tuple_break

    set x, [a]
    add x, i
    set push, [x+1]

    set x, [b]
    add x, i
    set push, [x+1]

    ifb [b + HANDLE_TYPE], TYPE_STR
        jsr assign_from_string
    ifc [b + HANDLE_TYPE], TYPE_STR
        jsr assign

    sti pc, assign_tuple_loop

:assign_tuple_break
    set x, b
    set pc, postamble

;----------------------------------------------------------------
; struct handle *assign_from_string(struct handle *left, uint16 char)
;   e.g. a,b = "xy"
;----------------------------------------------------------------
:assign_from_string
    set push, 2
    set push, 1
    jsr preamble

    set a, [z+11]

    set push, 1
    set push, TYPE_STR
    jsr array_create
    set [z-1], x
    set b, x

    set c, [x]
    set [c+1], [z+10]

    ifb [a + HANDLE_TYPE], TYPE_NAME | TYPE_STR
        set pc, assign_name

    set y, recover
    ifb [a + HANDLE_TYPE], TYPE_REFERENCE
        set y, dict__set
    ifb [a + HANDLE_TYPE], TYPE_SUBSCRIPTION
        set y, list_set

    set a, [a]
    set push, [a + REFERENCE_LEFT] ; = SUBSCRIPTION_LIST
    set push, [a + REFERENCE_RIGHT] ; = SUBSCRIPTION_INDEX
    set push, b
    jsr y
    #doc Illegal left side of subscription

    set x, b
    set pc, postamble

;----------------------------------------------------------------
; void del(struct handle *item)
;----------------------------------------------------------------
:del
    set push, 1
    set push, 1
    jsr preamble

    set a, [z+10]

    ifb [a + HANDLE_TYPE], TYPE_NAME
        set pc, del_name

    set y, recover
    ifb [a + HANDLE_TYPE], TYPE_SUBSCRIPTION
        set y, list_del

    set a, [a]
    set b, [a + REFERENCE_LEFT]
    ifb [b + HANDLE_TYPE], TYPE_DICT
        set y, dict_del

    set push, b                     ; LEFT
    set push, [a + REFERENCE_RIGHT] ; RIGHT
    jsr y
    #doc Wrong object type for delete

    set x, NONE
    set pc, postamble

:del_name
    set push, [current_scope]
    set push, a
    jsr scope_del

    set x, NONE
    set pc, postamble

;----------------------------------------------------------------
:cast_common_number_type
; fastcall
;   a: struct handle *left
;   b: struct handle *right
; return
;   a: struct handle *left_or_new_left
;   b: struct handle *right_or_new_right
;----------------------------------------------------------------
    ; automatic type conversions
    ifb [a + HANDLE_TYPE], TYPE_INT + TYPE_BOOL
        ifb [b + HANDLE_TYPE], TYPE_FLOAT
            set pc, itof_left

    ifb [b + HANDLE_TYPE], TYPE_INT + TYPE_BOOL
        ifb [a + HANDLE_TYPE], TYPE_FLOAT
            set pc, itof_right

    set pc, pop

:itof_left
    set push, a
    jsr float__from_int
    set [z-1], x
    set a, x
    set pc, pop

:itof_right
    set push, b
    jsr float__from_int
    set [z-2], x
    set b, x
    set pc, pop


;----------------------------------------------------------------
; utility subroutines to handle function setup and cleanup
;----------------------------------------------------------------

; postamble - subroutines must call postamble to return from
; if subroutine was intitialized by preamble. postamble will
; restore register and stack to original state and do rts.
; x:   return value
:postamble_none
    set x, NONE
:postamble
    set sp, z                ; free local vars and heap refs
    set z, pop                ; restore fp

    set y, pop                ; restore registers
    set j, pop
    set i, pop
    set c, pop
    set b, pop
    set a, pop

    add sp, 1                ; pop sizeof(heap refs)

    add [sp], sp            ; calculate ptr to 1st arg
    add [sp], 1                ; sp + num args + 1

    ; no good... but i couldn't figure out better way to do this
    set push, z                ; store fp to free a register for processing
    set z, [sp+1]            ; peek ptr to 1st arg
    set [z], [sp+2]            ; overwrite 1st arg with original return address
    set z, pop                ; pop fp
    set sp, [sp]            ; clear stack except for the return address
    ; ---

    set pc, pop                ; rts

; preamble - subroutines must
;  1. push number of subroutine arguments
;  2. push number of required heap references
;  3. call preamble before doing ANYTHING else
;
; Stack after preamble
;         [preamble]
; [sp+ 0] [fp- 1] heap reference (<-sp)
; [sp+ 1] [fp+ 0] FP (<-z)
; [sp+ 2] [fp+ 1] y
; [sp+ 3] [fp+ 2] j
; [sp+ 4] [fp+ 3] i
; [sp+ 5] [fp+ 4] c
; [sp+ 6] [fp+ 5] b
; [sp+ 7] [fp+ 6] a
;          [callee]
; [sp+ 8] [fp+ 7] sizeof(heap_references) (e.g. 1)
; [sp+ 9] [fp+ 8] sizeof(args) (e.g. 2)
;          [caller]
; [sp+10] [fp+9] RTS (to caller func)
; [sp+11] [fp+10] arg2 (rightmost)
; [sp+12] [fp+11] arg1 (leftmost)
:preamble
    set x, pop                ; pop return address

    ; store registers
    set push, a
    set push, b
    set push, c
    set push, i
    set push, j
    set push, y

    ; update frame pointer
    set push, z                ; old fp
    set z, sp                ; new fp

    ; init local variables and heap references to 0
    set i, sp
    sub i, [z+7]

:preamble_init_local
    ife sp, i
        set pc, x
    set push, 0

    set pc, preamble_init_local


;----------------------------------------------------------------
; void print(struct handle *string)
;----------------------------------------------------------------
:print_repr
    set push, 1
    set push, 0
    jsr preamble

    set a, [z+10]
    set push, a
    set push, screen_add_char

    jsr repr

    set pc, postamble

;----------------------------------------------------------------
; void print(struct handle *string)
;----------------------------------------------------------------
:print
    set push, 1
    set push, 0
    jsr preamble

    set a, [z+10]
    set push, a
    set push, screen_add_char

    ifb [a + HANDLE_TYPE], TYPE_STR
        set pc, print__str

    jsr repr
    set pc, postamble

:print__str
    jsr str__str
    set pc, postamble

;----------------------------------------------------------------
; struct handle *repr(struct handle *value, void *callback)
;----------------------------------------------------------------
:repr
    set push, 2
    set push, 0
    jsr preamble

;    set push, [z+10]
;    jsr eval
;    set [z-1], x
;    set a, x

    set x, [z+11]

    ifb [x + HANDLE_TYPE], TYPE_STR
        set pc, repr__string
;    ife [x + HANDLE_TYPE], TYPE_NAME
;        set pc, postamble
    ifb [x + HANDLE_TYPE], TYPE_BOOL
        set pc, repr__boolean
    ifb [x + HANDLE_TYPE], TYPE_NONE
        set pc, repr__none

    set y, recover
    ifb [x + HANDLE_TYPE], TYPE_INT
        set y, int_to_str
    ifb [x + HANDLE_TYPE], TYPE_FLOAT
        set y, float__to_str
    ifb [x + HANDLE_TYPE], TYPE_TUPLE + TYPE_LIST
        set y, list_repr
    ifb [x + HANDLE_TYPE], TYPE_DICT
        set y, dict_repr

    set push, x
    set push, [z+10]
    jsr y
    #doc Illegal type string conversion

    set pc, postamble

:repr__boolean
    set push, STR_TRUE
    ife x, BOOL_FALSE
        set [sp], STR_FALSE

:repr__str__finish
    set push, [z+10]
    jsr str__str

    set pc, postamble

:repr__none
    set push, STR_NONE
    set pc, repr__str__finish

:repr__string
    set push, x
    set push, [z+10]
    jsr str__repr

    set pc, postamble


;----------------------------------------------------------------
:detect_hardware
;----------------------------------------------------------------
    hwn i
:detect_hardware__loop
    ife i, 0
       set pc, pop
    sub i, 1
    hwq i
    ife a, 0xf615
        ife b, 0x7349
            set [monitor], i
    ife a, 0x7406
        ife b, 0x30cf
            set [keyboard], i
    ife a, 0xb402
        ife b, 0x12d1
            set [timer], i
    ife a, 0x24c5
        ife b, 0x4fd5
            set [floppy], i
    ife a, 0x9088
        ife b, 0xe023
            set [hic], i
    ife a, 0x90a5
        ife b, 0xd005
            set [rci], i
    set pc, detect_hardware__loop

:key_interrupt
    set push, b
    set push, c

    set b, KEY_ALT
    hwi [keyboard]

    ifn c, 0
        jsr recover
        #doc keyboard interrupt

    set c, pop
    set b, pop

    rfi x

;----------------------------------------------------------------
:win_getchar
; return
;   c: input character
;----------------------------------------------------------------
    ifn [clipboard_state], 0
        set pc, win_getchar_from_clipboard

:win_getchar_from_device
    set a, 1                      ; store next key mode
    hwi [keyboard]

    ife c, 0
        set pc, win_getchar

    ife c, KEY_CTRL
        set pc, win_getchar

    ife c, KEY_SHIFT
        set pc, win_getchar

    set push, c

;    set a, 2
;    set b, KEY_SHIFT
;    hwi [keyboard]
;    shl c, 14
;    bor [sp], c

    set a, 2
    set b, KEY_CTRL
    hwi [keyboard]
    ifn c, 0
        and [sp], KEY_CTRL_MASK
    set c, pop

    ifn c, KEY_CTRL_Y
        set pc, pop

:win_getchar_from_clipboard
    ; handle paste
    set push, [global_scope]
    set push, STR_CLIPBOARD
    jsr dict_get

    ife x, 0
        set pc, win_getchar_from_clipboard_break

    set x, [x]
    ifl [clipboard_state], [x]
        set pc, win_getchar_from_clipboard_next

:win_getchar_from_clipboard_break
    set [clipboard_state], 0
    set pc, win_getchar_from_device

:win_getchar_from_clipboard_next
    add [clipboard_state], 1
    add x, [clipboard_state]
    set c, [x]
    set pc, pop

;----------------------------------------------------------------
; struct handle *raw_input(struct handle *prompt)
;----------------------------------------------------------------
:raw_input
    set push, 1
    set push, 1
    jsr preamble

    ife [z+10], 0
        set pc, raw_input_no_prompt

    ; print prompt
    set push, [z+10]
    jsr eval
    set [z-1], x

    set push, [z-1]
    jsr print

:raw_input_no_prompt
    set b, [screen_cursor]

:next_char_loop
    ; start of input
    jsr screen_toggle_cursor

    ; Handle keyboard input
:input_loop
    set a, 1                      ; store next key mode
    hwi [keyboard]
    ife c, 0
        set pc, input_loop        ; no input
    ifg c, 0x7f
        set pc, input_loop

    jsr screen_toggle_cursor

    ife c, KEY_NEWLINE
        set pc, finish

    ife c, KEY_BS
        ife [screen_cursor], b
            set pc, next_char_loop

    ifn c, KEY_BS
        ifn c, KEY_NEWLINE
            ife [screen_cursor], SCREEN_MEM__VIDEO_SIZE - 1
                sub b, SCREEN_COLS

    jsr screen_add_char

    set pc, next_char_loop

:finish
    set a, [screen_cursor]
    sub a, b
    add a, 1

    set push, a
    set push, TYPE_STR
    jsr array_create

    set j, [x]                    ; struct string *
    add j, [j]                    ; string[last]
    set [j], 10                    ; set newline
    std i, [screen_cursor]     ; i = cursor -1

:finish_loop
    ifl i, b
        set pc, postamble
    set [j], [video_ram_start + i]
    and [j], 0x007f

    std pc, finish_loop

;----------------------------------------------------------------
:built_in_matcher
; fastcall
;   a: str.ptr
;   b: str.len
;   x: list
; return
;   c: value
;----------------------------------------------------------------
    sub a, 1
    add b, 1
    sub x, 1

:built_in_matcher_list_loop
    sti j, x

    ; calculate return value pointer
    set x, [j]
    add x, j

    set c, [x]
    ife [j], 1      ; length
        set pc, pop

    ifn [j], b      ; if length != search length -> continue
        set pc, built_in_matcher_list_loop

    sti i, a

:built_in_matcher_cmp_loop
    ife [j], [i]
        ifl j, x
            sti pc, built_in_matcher_cmp_loop

    ife j, x
        set pc, pop

    set pc, built_in_matcher_list_loop

;----------------------------------------------------------------
:return_true
;----------------------------------------------------------------
    set x, BOOL_TRUE
    set pc, postamble

;----------------------------------------------------------------
:return_false
;----------------------------------------------------------------
    set x, BOOL_FALSE
    set pc, postamble

;----------------------------------------------------------------
:halt
;----------------------------------------------------------------
    set pc, halt
