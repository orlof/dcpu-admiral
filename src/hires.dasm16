;----------------------------------------------------------------
:hires__init
;----------------------------------------------------------------
    set [screen_mode], hires__clear
    jsr hires__clear

    set a, 3
    set b, 0x0
    hwi [pixie]

    set a, 0x10
    set b, 1
    hwi [pixie]

    set pc, pop

;----------------------------------------------------------------
:hires__finish
; WARNING this trash registers
;----------------------------------------------------------------
    set [screen_mode], screen_clear

    set a, 3
    set b, 0x7
    hwi [pixie]

    jsr screen_clear

    set a, 0x10
    set b, 0
    hwi [pixie]

    set pc, pop

;----------------------------------------------------------------
:hires__clear
;----------------------------------------------------------------
    set push, 0
    set push, 0
    jsr preamble

    set c, 0

    set i, video_ram_start
    set j, video_ram_start + 768

    iaq TRUE
    jsr mem_clear
    iaq FALSE

    set pc, postamble

;----------------------------------------------------------------
:hires__circle
; (x, y, r, mode)
; all param values are verified < 64, cannot bug mem mgmt
;----------------------------------------------------------------
    set push, 3
    set push, 0
    jsr preamble

    set c, [z+10]           ; mode
    set a, [z+11]           ; x
    set b, 0                ; y
    set i, 0                ; err

:hires__circle__loop
    ifg b, a
        set pc, postamble

    ; (x0 + x, y0 + y);1
    set X, [z+13]
    add X, a

    set Y, [z+12]
    add Y, b
    jsr hires__circle__plot

    ; (x0 + x, y0 - y);2
    set Y, [z+12]
    sub Y, b
    jsr hires__circle__plot

    ; (x0 - x, y0 - y);3
    set X, [z+13]
    sub X, a
    jsr hires__circle__plot

    ; (x0 - x, y0 + y);4
    set Y, [z+12]
    add Y, b
    jsr hires__circle__plot

    ; (x0 + y, y0 + x);5
    set X, [z+13]
    add X, b

    set Y, [z+12]
    add Y, a
    jsr hires__circle__plot

    ; (x0 + y, y0 - x);6
    set Y, [z+12]
    sub Y, a
    jsr hires__circle__plot

    ; (x0 - y, y0 - x);7
    set X, [z+13]
    sub X, b
    jsr hires__circle__plot

    ; (x0 - y, y0 + x);8
    set Y, [z+12]
    add Y, a
    jsr hires__circle__plot

    add b, 1
    set push, b
    mli [sp], 2
    add [sp], 1
    add i, pop

    set push, i
    sub [sp], a
    mli [sp], 2

    ifb 0x8000, pop
        set pc, hires__circle__loop

    sub a, 1
    set push, 1
    set push, a
    mli [sp], 2
    sub [sp], pop
    add i, pop

    set pc, hires__circle__loop

:hires__circle__plot
    ifg X, 127
        set pc, pop

    ifg Y, 95
        set pc, pop

    jsr hires__point

    set pc, pop

;----------------------------------------------------------------
:hires__line
; (x0, y0, x1, y1, mode)
; all params must be veried to be in screen boundaries
; x = x0, y = y0, a = dx, b = dy, i = err, j = e2
; sx
; sy  <- SP
;----------------------------------------------------------------
    set push, 4
    set push, 0
    jsr preamble

    set x, [z+14]           ; x0
    set y, [z+13]           ; y0

    set a, [z+12]           ; dx
    sub a, x
    ifb a, 0x8000
        mul a, -1

    set b, [z+11]           ; dy
    sub b, y
    ifb b, 0x8000
        mul b, -1

    set c, [z+10]

    set push, -1            ; sx = i [sp+2]
    ifl x, [z+12]
        set [sp], 1

    set push, -1            ; sy = j = [sp+1]
    ifl y, [z+11]
        set [sp], 1

    set i, b                ; err
    mul i, -1
    ifg a, b
        set i, a

    asr i, 1

    set j, 0             ; e2 = j

:hires__line__loop
    jsr hires__point

    ife x, [z+12]
        ife y, [z+11]
            set pc, postamble

    set j, i

    mul a, -1
    ifa j, a
        jsr hires__line__update_x
    mul a, -1

    ifu j, b
        jsr hires__line__update_y

    set pc, hires__line__loop

:hires__line__update_x
    sub i, b
    add x, [sp + 2]
    set pc, pop

:hires__line__update_y
    add i, a
    add y, [sp + 1]
    set pc, pop

; void line(int x0, int y0, int x1, int y1) {
;
;   int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
;   int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
;   int err = (dx>dy ? dx : -dy)/2, e2;
;
;   for(;;){
;     setPixel(x0,y0);
;     if (x0==x1 && y0==y1) break;
;     e2 = err;
;     if (e2 >-dx) { err -= dy; x0 += sx; }
;     if (e2 < dy) { err += dx; y0 += sy; }
;   }
; }

;----------------------------------------------------------------
:hires__get_point
; (x, y)
; all param values are verified < 64, cannot bug mem mgmt
;----------------------------------------------------------------
    ; bit
    set push, 0x8000

    set push, x
    and [sp], 0xf
    shr [sp], pop

    ; word
    shr x, 4
    set push, y
    shl [sp], 3
    bor x, pop
    add x, video_ram_start

    set x, [x]
    and x, pop

    set pc, pop

;----------------------------------------------------------------
:hires__point
; fastcall (x, y, c)
; preserves all registers
; all param values are verified < 64, cannot bug mem mgmt
;----------------------------------------------------------------
    set push, x

    ; bit
    set push, 0x8000

    set push, x
    and [sp], 0xf
    shr [sp], pop

    ; word
    shr x, 4
    set push, y
    shl [sp], 3
    bor x, pop
    add x, video_ram_start

    ife c, 0
        set pc, hires__point__clear

    ife c, 1
        bor [x], pop
    ife c, 0xffff
        xor [x], pop

    set x, pop
    set pc, pop

:hires__point__clear
    xor [sp], 0xffff
    and [x], pop

    set x, pop
    set pc, pop
