;----------------------------------------------------------------
:hires__init
;----------------------------------------------------------------
    set [screen_blank], SCREEN_BLANK_PIX
    set b, hires_font_ram
    set pc, hires__mode

;----------------------------------------------------------------
:hires__finish
; WARNING this trash registers
;----------------------------------------------------------------
    set [screen_blank], SCREEN_BLANK_CHAR
    set b, 0

:hires__mode
    set a, 1
    hwi [monitor]

    set a, 0
    set b, [current_screen]
    set b, [b]
    hwi [monitor]

    set a, 2
    set b, 0
    hwi [monitor]

    jsr screen_clear

    set pc, pop

;----------------------------------------------------------------
:hires__circle
; (x, y, r, color)
; all param values are verified < 64, cannot bug mem mgmt
;----------------------------------------------------------------
    set push, 4
    set push, 0
    jsr preamble

    set a, [z+11]           ; x
    set b, 0                ; y
    set c, 0                ; err

:hires__circle__loop
    ifg b, a
        set pc, postamble

    ; (x0 + x, y0 + y);1
    set i, [z+13]
    add i, a

    set j, [z+12]
    add j, b
    jsr hires__circle__plot

    ; (x0 + x, y0 - y);2
    set j, [z+12]
    sub j, b
    jsr hires__circle__plot

    ; (x0 - x, y0 - y);3
    set i, [z+13]
    sub i, a
    jsr hires__circle__plot

    ; (x0 - x, y0 + y);4
    set j, [z+12]
    add j, b
    jsr hires__circle__plot

    ; (x0 + y, y0 + x);5
    set i, [z+13]
    add i, b

    set j, [z+12]
    add j, a
    jsr hires__circle__plot

    ; (x0 + y, y0 - x);6
    set j, [z+12]
    sub j, a
    jsr hires__circle__plot

    ; (x0 - y, y0 - x);7
    set i, [z+13]
    sub i, b
    jsr hires__circle__plot

    ; (x0 - y, y0 + x);8
    set j, [z+12]
    add j, a
    jsr hires__circle__plot

    add b, 1
    set push, b
    mli [sp], 2
    add [sp], 1
    add c, pop

    set push, c
    sub [sp], a
    mli [sp], 2

    ifb 0x8000, pop
        set pc, hires__circle__loop

    sub a, 1
    set push, 1
    set push, a
    mli [sp], 2
    sub [sp], pop
    add c, pop

    set pc, hires__circle__loop

:hires__circle__plot
    ifg i, 63
        set pc, pop

    ifg j, 47
        set pc, pop

    set push, i
    set push, j
    set push, [z+10]
    jsr hires__point

    set pc, pop

;----------------------------------------------------------------
:hires__line
; (x0, y0, x1, y1, color)
; all param values are verified < 64, cannot bug mem mgmt
;----------------------------------------------------------------
    set push, 5
    set push, 0
    jsr preamble

    set x, [z+14]           ; x0
    set y, [z+13]           ; y0

    set a, [z+12]           ; dx
    sub a, x
    ifb a, 0x8000
        mul a, -1

    set b, [z+11]           ; dy
    sub b, y
    ifb b, 0x8000
        mul b, -1

    set i, -1               ; sx
    ifl x, [z+12]
        set i, 1

    set j, -1               ; sy
    ifl y, [z+11]
        set j, 1

    set c, b                ; err
    mul c, -1
    ifg a, b
        set c, a

    asr c, 1

    set push, 0             ; e2

:hires__line__loop
    set push, x
    set push, x
    set push, y
    set push, [z+10]
    jsr hires__point
    set x, pop

    ife x, [z+12]
        ife y, [z+11]
            set pc, postamble

    set [sp], c

    mul a, -1
    ifa [sp], a
        jsr hires__line__update_x
    mul a, -1

    ifu [sp], b
        jsr hires__line__update_y

    set pc, hires__line__loop

:hires__line__update_x
    sub c, b
    add x, i
    set pc, pop

:hires__line__update_y
    add c, a
    add y, j
    set pc, pop

; void line(int x0, int y0, int x1, int y1) {
;
;   int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
;   int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
;   int err = (dx>dy ? dx : -dy)/2, e2;
;
;   for(;;){
;     setPixel(x0,y0);
;     if (x0==x1 && y0==y1) break;
;     e2 = err;
;     if (e2 >-dx) { err -= dy; x0 += sx; }
;     if (e2 < dy) { err += dx; y0 += sy; }
;   }
; }

;----------------------------------------------------------------
:hires__get_point
; (x, y)
; all param values are verified < 64, cannot bug mem mgmt
;----------------------------------------------------------------
    set push, 2
    set push, 0
    jsr preamble

    set x, [z + 11]
    set y, [z + 10]
    jsr hires__pixel_addr

    set x, [z + 11]
    set y, [z + 10]
    jsr hires__pixel_bit

    set x, BOOL_FALSE
    ifb [a], 0x0f00
        set x, BOOL_TRUE

    ife b, 0x80
        set pc, postamble

    ifc [a], b
        set pc, postamble

    set c, x
    set x, BOOL_FALSE
    ife c, BOOL_FALSE
        set x, BOOL_TRUE
    set pc, postamble

;----------------------------------------------------------------
:hires__point
; (x, y, color)
; all param values are verified < 64, cannot bug mem mgmt
;----------------------------------------------------------------
    set push, 3
    set push, 0
    jsr preamble

    and [z + 10], 0x000f

    set x, [z + 12]
    set y, [z + 11]
    jsr hires__pixel_addr

    set x, [z + 12]
    set y, [z + 11]
    jsr hires__pixel_bit

    set c, [a]
    shr c, 8
    and c, 0x000f

    ife b, 0x80
        set pc, hires__set_pixel__8

    ifn c, [z + 10]
        ; if not bg -> set bit
        set pc, hires__set_pixel__set

    ; clear pixel
    xor b, 0xffff
    and [a], b

    set pc, postamble

:hires__set_pixel__set
    ; set pixel
    bor [a], b

    set pc, postamble

:hires__set_pixel__8
    ife c, [z + 10]
        ; if bg -> noop
        set pc, postamble

    set c, [a]
    and c, 0x00ff
    xor c, 0x007f

    set b, [a]
    and b, 0xf000
    shr b, 4
    bor c, b

    set b, [a]
    and b, 0x0f00
    shl b, 4
    bor c, b

    set [a], c

    set pc, postamble

;----------------------------------------------------------------
:hires__pixel_bit
; fastcall: x, y -> b
;----------------------------------------------------------------
    set b, 0x80

    and x, 1
    shl x, 2
    shr b, x

    and y, 3
    shr b, y

    set pc, pop

;----------------------------------------------------------------
:hires__pixel_addr
; fastcall: x, y -> a
;----------------------------------------------------------------
    set a, video_ram_start

    shr y, 2
    shl y, 5
    add a, y

    shr x, 1
    add a, x

    set pc, pop

;----------------------------------------------------------------
:hires__load_lem_from_sector
; sector
;----------------------------------------------------------------
    set push, 2
    set push, 0
    jsr preamble

    ; MEM_MAP_FONT

    set a, 1
    set b, hires_font_ram
    hwi [monitor]

    ; load buffer

    ; addr
    set push, [z+11]
    jsr int_to_int16
    set y, x

    ; sector
    set push, [z+10]
    jsr int_to_int16
    mod x, 1440

    set a, 2
    hwi [floppy]

    set a, 0
    :hires__load_lem_from_sector__loop
    hwi [floppy]
    ifn b, 1
        set pc, hires__load_lem_from_sector__loop

    ; MEM_MAP_SCREEN

    set b, y
    add b, 16
    hwi [monitor]

    ; MEM_MAP_PALETTE

    set a, 2
    set b, y
    hwi [monitor]

    set pc, postamble
