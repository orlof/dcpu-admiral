;----------------------------------------------------------------
:built_in
;----------------------------------------------------------------
    set a, [z+10]
    ifb [a+HANDLE_TYPE], TYPE_NAME
        set pc, built_in__global_functions
    ifb [a+HANDLE_TYPE], TYPE_REFERENCE
        set pc, built_in__object_functions

    set pc, led_lparen_user_defined

:built_in__object_functions
    set a, [a]
    set b, [a + REFERENCE_LEFT]

    ; ADD HERE OBJECT TYPES THAT HAVE METHODS
    set x, 0
    ifb [b + HANDLE_TYPE], TYPE_LIST
        set x, built_in__list_methods
    ifb [b + HANDLE_TYPE], TYPE_STR
        set x, built_in__str_methods
    ifb [b + HANDLE_TYPE], TYPE_DICT
        set x, built_in__dict_methods

    ife x, 0
        set pc, led_lparen_user_defined

    set a, [a + REFERENCE_RIGHT]
    set a, [a]

    set b, [a]
    add a, 1

    jsr built_in_matcher
    set pc, c

:built_in__global_functions
    set a, [a]

    set b, [a]
    ifg b, 7
        set pc, led_lparen_user_defined

    add a, 1

    set x, [built_in_functions_by_len + b - 1]

    jsr built_in_matcher
    set pc, c

;----------------------------------------------------------------
DAT 0xffff
:built_in__object_method__init
;----------------------------------------------------------------
    jsr built_in_params

    set a, [z+10]
    set a, [a]
    set a, [a + REFERENCE_LEFT]

    set pc, pop

;----------------------------------------------------------------
:built_in__dict_create
;----------------------------------------------------------------
    jsr built_in__object_method__init

    ifn i, 0
        jsr recover
        #doc Wrong number of arguments for dict constructor (>0)

    set push, 5
    set push, TYPE_DICT
    jsr alloc
    set [z-1], x

    set push, x
    set push, STR_UNDERSCORE
    set push, a
    jsr dict__set

    set x, [z-1]
    set pc, postamble


;----------------------------------------------------------------
:built_in__list_append
;----------------------------------------------------------------
    jsr built_in__object_method__init

    ifn i, 1
        jsr recover
        #doc Wrong number of arguments for list append (1)

    set push, a
    set push, [z-1]
    jsr array__append

    set x, a
    set pc, postamble

;----------------------------------------------------------------
:built_in__list_insert
;----------------------------------------------------------------
    jsr built_in__object_method__init
    ifn i, 2
        jsr recover
        #doc Wrong number of arguments for list insert (2)

    set push, [z-1]        ; struct handle *index
    jsr int_to_int16

    set push, a
    set push, x
    set push, [z-2]
    jsr array__insert

    set x, a
    set pc, postamble

;----------------------------------------------------------------
DAT 0
DAT TYPE_STR + TYPE_BOOL + TYPE_NONE + TYPE_INT + TYPE_FLOAT + TYPE_TUPLE + TYPE_LIST + TYPE_DICT
:built_in_id
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr uint16_to_int

    set pc, postamble

;----------------------------------------------------------------
DAT 0xffff
:built_in_input
;----------------------------------------------------------------
    jsr built_in_params

    ifg i, 1
        jsr recover
        #doc Wrong number of arguments for input()

    set push, [z-1]
    jsr raw_input
    set [z-1], x

    set a, [x]
    sub [a], 1

    set c, 10
    jsr screen_add_char

    set x, [z-1]
    set pc, postamble

;----------------------------------------------------------------
DAT 0xffff
:built_in_range
;----------------------------------------------------------------
    jsr built_in_params

    ife i, 0
        jsr recover
        #doc range() needs at least one argument

    ifg i, 1
        set pc, built_in_range_2

    set [z-2], [z-1]
    set [z-1], INT_0

:built_in_range_2
    ifg i, 2
        set pc, built_in_range_3

    set [z-3], INT_1

:built_in_range_3
    ifg i, 3
        jsr recover
        #doc Too many arguments for range()

    set a, [z-1]
    set b, [a + HANDLE_TYPE]
    set a, [z-2]
    bor b, [a + HANDLE_TYPE]
    set a, [z-3]
    bor b, [a + HANDLE_TYPE]

    ifn b, TYPE_INT
        jsr recover
        #doc range() arguments are not integers error

    set push, [z-3]
    jsr int_sgn
    set y, x
    mul y, -1

    set push, 20
    set push, TYPE_LIST
    jsr alloc
    set [z-4], x

    ife y, 0
        set pc, built_in_range_break

:built_in_range_loop
    set push, [z-1]
    set push, [z-2]
    jsr val_cmp

    ifn x, y
        set pc, built_in_range_break

    set push, [z-4]
    set push, [z-1]
    jsr array__append

    set push, [z-1]
    set push, [z-3]
    jsr int_add
    set [z-1], x

    set pc, built_in_range_loop

:built_in_range_break
    set x, [z-4]
    set pc, postamble

;----------------------------------------------------------------
DAT 0
:built_in_mem
;----------------------------------------------------------------
    jsr built_in_params

    iaq TRUE
    jsr mark
    jsr compact
    iaq FALSE

    set a, [heap_handle_start]
    sub a, [heap_free_start]

    set push, a
    jsr uint16_to_int

    set pc, postamble

;----------------------------------------------------------------
DAT 0
:built_in_locals
;----------------------------------------------------------------
    jsr built_in_params

    set x, [current_scope]
    set pc, postamble

;----------------------------------------------------------------
DAT 0
:built_in_globals
;----------------------------------------------------------------
    jsr built_in_params

    set x, [global_scope]
    set pc, postamble

;----------------------------------------------------------------
DAT 0
DAT TYPE_STR + TYPE_BOOL + TYPE_NONE + TYPE_INT + TYPE_FLOAT + TYPE_TUPLE + TYPE_LIST + TYPE_DICT
DAT TYPE_STR + TYPE_BOOL + TYPE_NONE + TYPE_INT + TYPE_FLOAT + TYPE_TUPLE + TYPE_LIST + TYPE_DICT
:built_in_cmp
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    set push, [z-2]
    jsr val_cmp
    set a, x

    set x, INT_0
    ife a, -1
        set x, INT_N1
    ife a, 1
        set x, INT_1

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT
:built_in_chr
;----------------------------------------------------------------
    jsr built_in_params

    set a, [z-1]
    set a, [a]
    add a, [a]

    set push, 1
    set push, TYPE_STR
    jsr array_create

    set b, [x]
    set [b+1], [a]

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_STR
:built_in_ord
;----------------------------------------------------------------
    jsr built_in_params

    set a, [z-1]
    set a, [a]
    ifn [a], 1
        jsr recover
        #doc ord() can only be used for single character, not strings

    set push, [a+1]
    jsr uint16_to_int

    set pc, postamble

;----------------------------------------------------------------
DAT 0xffff
:built_in_edit
;----------------------------------------------------------------
    jsr built_in_params
    ifg i, 1
        jsr recover
        #doc Too many parameters for edit([str])

    set a, [z-1]
    ife i, 0
        set a, STR_EMPTY

    ifc [a + HANDLE_TYPE], TYPE_STR
        jsr recover
        #doc Illegal parameter type for edit(str)

    set push, a
    jsr edit_main

    set pc, postamble

;----------------------------------------------------------------
DAT 0xffff
:built_in_rnd
;----------------------------------------------------------------
    jsr built_in_params
    ifg i, 0
        set pc, built_in_rnd_1

    set a, FLOAT_0
    set b, FLOAT_1

    set pc, built_in_rnd_finish

:built_in_rnd_1
    ifg i, 1
        set pc, built_in_rnd_2

    set b, [z-1]
    set c, [b + HANDLE_TYPE]

    ifc c, TYPE_INT + TYPE_FLOAT
        jsr recover
        #doc rnd(): Type mismatch error

    set a, INT_0
    ife c, TYPE_FLOAT
        set a, FLOAT_0

    set pc, built_in_rnd_finish

:built_in_rnd_2
    set a, [z-1]
    set b, [z-2]

    ifc [a + HANDLE_TYPE], TYPE_FLOAT + TYPE_INT
        jsr recover
        #doc rnd(): Type mismatch error
    ifc [b + HANDLE_TYPE], TYPE_FLOAT + TYPE_INT
        jsr recover
        #doc rnd(): Type mismatch error

:built_in_rnd_finish
    jsr cast_common_number_type

    set y, int_random
    ifb [a + HANDLE_TYPE], TYPE_FLOAT
        set y, float__random

    set push, a
    set push, b
    jsr y

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT + TYPE_FLOAT
:built_in_abs
;----------------------------------------------------------------
    jsr built_in_params

    set a, [z-1]
    set push, a

    ifb [a + HANDLE_TYPE], TYPE_INT
        jsr int_abs
    ifb [a + HANDLE_TYPE], TYPE_FLOAT
        jsr float__abs

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_STR + TYPE_TUPLE + TYPE_DICT + TYPE_LIST
:built_in_len
;----------------------------------------------------------------
    jsr built_in_params

    set a, [z-1]
    set a, [a]

    set push, [a]
    jsr uint16_to_int

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_STR + TYPE_BOOL + TYPE_NONE + TYPE_INT + TYPE_FLOAT + TYPE_TUPLE + TYPE_LIST + TYPE_DICT
:built_in_type
;----------------------------------------------------------------
    jsr built_in_params

    set x, [z-1]
    set push, [x + HANDLE_TYPE]
    jsr uint16_to_int

    set pc, postamble

;----------------------------------------------------------------
DAT 0
:built_in_dir
;----------------------------------------------------------------
    jsr built_in_params

    ife [floppy], 0xffff
        jsr recover
        #doc dir(): M35FD device not present error

    jsr floppy__dir__read

    set pc, postamble

;----------------------------------------------------------------
DAT 0
:built_in_format
;----------------------------------------------------------------
    jsr built_in_params

    ife [floppy], 0xffff
        jsr recover
        #doc format(): M35FD device not present error

    jsr floppy__format

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0, TYPE_STR
:built_in_load
;----------------------------------------------------------------
    jsr built_in_params

    ife [floppy], 0xffff
        jsr recover
        #doc load(): M35FD device not present error

    set push, [z-1]
    jsr floppy__file__read

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_STR, TYPE_STR + TYPE_BOOL + TYPE_NONE + TYPE_INT + TYPE_FLOAT + TYPE_TUPLE + TYPE_LIST + TYPE_DICT
:built_in_save
;----------------------------------------------------------------
    jsr built_in_params

    ife [floppy], 0xffff
        jsr recover
        #doc save(): M35FD device not present error

    set push, [z-1]
    set push, [z-2]
    jsr floppy__file__write

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0, TYPE_STR
:built_in_rm
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr floppy__file__delete

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_STR + TYPE_BOOL + TYPE_INT + TYPE_FLOAT
:built_in_int
;----------------------------------------------------------------
    jsr built_in_params

    set a, [z-1]

    ifb [a + HANDLE_TYPE], TYPE_BOOL
        set pc, built_in_int_bool
    ifb [a + HANDLE_TYPE], TYPE_STR
        set pc, built_in_int_string
    ifb [a + HANDLE_TYPE], TYPE_FLOAT
        set pc, built_in_int_float

:built_in_int_int
    set x, a
    set pc, postamble

:built_in_int_bool
    ife a, BOOL_FALSE
        set x, INT_0
    ife a, BOOL_TRUE
        set x, INT_1
    set pc, postamble

:built_in_int_string
    set push, a
    jsr int_parse
    set pc, postamble

:built_in_int_float
    set push, a
    jsr float__to_int
    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_STR + TYPE_BOOL + TYPE_INT + TYPE_FLOAT
:built_in_float
;----------------------------------------------------------------
    jsr built_in_params

    set a, [z-1]

    ifb [a + HANDLE_TYPE], TYPE_BOOL
        set pc, built_in_float_bool
    ifb [a + HANDLE_TYPE], TYPE_STR
        set pc, built_in_float_string
    ifb [a + HANDLE_TYPE], TYPE_FLOAT
        set pc, built_in_float_float

:built_in_float_int
    set push, a
    jsr float__from_int
    set pc, postamble

:built_in_float_bool
    ife a, BOOL_FALSE
        set x, FLOAT_0
    ife a, BOOL_TRUE
        set x, FLOAT_1
    set pc, postamble

:built_in_float_string
    set push, a
    jsr float__from_str
    set pc, postamble

:built_in_float_float
    set x, a
    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_STR + TYPE_BOOL + TYPE_NONE + TYPE_INT + TYPE_FLOAT + TYPE_TUPLE + TYPE_LIST + TYPE_DICT
:built_in_repr
;----------------------------------------------------------------
    jsr built_in_params

    jsr init_str_builder

    set push, [z-1]
    set push, built_in_repr_builder
    jsr repr

    set x, [z-2]
    set pc, postamble

:built_in_repr_builder
    set push, [repr_builder_ref]
    set push, c
    jsr array__append

    set pc, pop

:init_str_builder
    set push, 20
    set push, TYPE_STR
    jsr alloc
    set [z-2], x
    set [repr_builder_ref], x

    set pc, pop

;----------------------------------------------------------------
DAT 0, TYPE_INT
:built_in_hex
;----------------------------------------------------------------
    jsr built_in_params
    jsr init_str_builder

    set push, [z-1]
    set push, built_in_repr_builder
    jsr int_to_hex

    set x, [z-2]
    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_STR + TYPE_BOOL + TYPE_NONE + TYPE_INT + TYPE_FLOAT + TYPE_TUPLE + TYPE_LIST + TYPE_DICT
:built_in_str
;----------------------------------------------------------------
    jsr built_in_params

    set x, [z-1]
    ifb [x + HANDLE_TYPE], TYPE_STR
        set pc, postamble

    jsr init_str_builder

    set push, [z-1]
    set push, built_in_repr_builder
    jsr repr

    set x, [z-2]
    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT + TYPE_BOOL + TYPE_FLOAT + TYPE_STR + TYPE_NONE + TYPE_TUPLE + TYPE_LIST + TYPE_DICT
:built_in_bool
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr boolean

    set pc, postamble

;----------------------------------------------------------------
DAT 0
:built_in_getchar
;----------------------------------------------------------------
    jsr built_in_params

:built_in_getchar_loop
    set a, 1              ; store next key mode
    hwi [keyboard]

    ife c, 0
        set pc, built_in_getchar_loop

    set push, 1
    set push, TYPE_STR
    jsr array_create

    set a, [x]
    set [a+1], c

    set pc, postamble

;----------------------------------------------------------------
DAT 0xffff
:built_in_key
;----------------------------------------------------------------
    jsr built_in_params
    ife i, 1
        set pc, built_in_key_1

    ifn i, 0
        jsr recover
        #doc Wrong number of arguments for key()

    set a, 1              ; store next key mode
    hwi [keyboard]

    set x, INT_0
    ife c, 0
        set pc, postamble

    set push, c
    jsr uint16_to_int

    set pc, postamble

:built_in_key_1
    set a, [z-1]
    ifc [a + HANDLE_TYPE], TYPE_INT
        jsr recover
        #doc key(): Argument must be of type int

    set push, a
    jsr int_to_int16
    set b, x

:built_in_key_1_key
    set a, 2              ; store next key mode
    hwi [keyboard]

    set x, BOOL_TRUE
    ife c, 0
        set x, BOOL_FALSE

    set pc, postamble

;----------------------------------------------------------------
DAT 0xffff
:built_in_sort
;----------------------------------------------------------------
    jsr built_in_params

    set x, NONE
    ife i, 1
        set x, BOOL_FALSE
    ife i, 2
        set x, [z-2]

    ife x, NONE
        jsr recover
        #doc sort(): Wrong number of arguments error

    ifc [x + HANDLE_TYPE], TYPE_BOOL
        jsr recover
        #doc sort(): Illegal argument type error

    set push, [z-1]
    set push, x
    jsr sort

    set pc, postamble

;----------------------------------------------------------------
DAT 0xffff
:built_in_cursor
;----------------------------------------------------------------
    jsr built_in_params
    ife i, 0
        set pc, built_in_cursor_coords
    ifn i, 2
        jsr recover
        #doc Wrong number of arguments for cursor([x, y])

    set x, [z-1]
    ifc [x + HANDLE_TYPE], TYPE_INT
        jsr recover
        #doc Illegal argument type for cursor([x, y])

    set push, x
    jsr int_to_int16

    ifb x, 0x8000
        set x, 0
    ifg x, SCREEN_COLS - 1
        set x, SCREEN_COLS - 1

    set push, x

    set x, [z-2]
    ifc [x + HANDLE_TYPE], TYPE_GROUP_INTEGER
        jsr recover
        #doc cursor(): Illegal argument type error

    set push, x
    jsr int_to_int16

    ifb x, 0x8000
        set x, 0
    ifg x, SCREEN_ROWS - 1
        set x, SCREEN_ROWS - 1

    set push, x

    jsr screen_move_cursor

:built_in_cursor_coords
    jsr screen__get_cursor

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT, TYPE_INT
:built_in_win_get
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr int_to_int16
    ifg x, SCREEN_COLS - 1
        set pc, postamble_none
    set push, x

    set push, [z-2]
    jsr int_to_int16
    ifg x, SCREEN_ROWS - 1
        set pc, postamble_none
    set push, x

    jsr screen__get
    set c, x

    set push, 1
    set push, TYPE_STR
    jsr array_create

    set a, [x]
    set [a+1], c

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT, TYPE_INT, TYPE_STR
:built_in_win_set
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr int_to_int16
    ifg x, SCREEN_COLS - 1
        set pc, postamble_none
    set push, x

    set push, [z-2]
    jsr int_to_int16
    ifg x, SCREEN_ROWS - 1
        set pc, postamble_none
    set push, x

    set x, [z-3]
    set x, [x]
    ifn [x], 1
        jsr recover
        #doc winset(): Argument string too long error

    set push, [x+1]

    jsr screen__set

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0, TYPE_INT
:built_in_call
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr int_to_int16

    set push, z
    set push, x

    jsr load_registers

    jsr pop

    jsr save_registers

    set z, pop
    set pc, postamble_none

;----------------------------------------------------------------
DAT 0xffff  ; disable parameter checks
:built_in_peek
;----------------------------------------------------------------
    jsr built_in_params

    set x, [z-1]
    ifc [x + HANDLE_TYPE], TYPE_INT
        jsr recover
        #doc peek(): Illegal argument type error

    set push, x
    jsr int_to_int16

    ife i, 2
        set pc, built_in_peek_str

    ifn i, 1
        jsr recover
        #doc peek(): Wrong number of arguments error

    set push, [x]
    jsr uint16_to_int

    set pc, postamble

:built_in_peek_str
    ; x: UINT16 *from
    set i, x

    set x, [z-2]
    ifc [x + HANDLE_TYPE], TYPE_INT
        jsr recover
        #doc peek(): Illegal argument type error

    set push, x
    jsr int_to_int16
    add i, x
    sub i, 1

    set push, x
:built_in_peek_str_merge
    set push, TYPE_STR
    jsr array_create
    set j, [x]
    add j, [j]

:built_in_peek_str_loop
    ife j, [x]
        set pc, postamble

    std [j], [i]
    set pc, built_in_peek_str_loop

;----------------------------------------------------------------
DAT 0, TYPE_INT, TYPE_INT + TYPE_STR
:built_in_poke
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr int_to_int16
    set j, x

    set x, [z-2]
    ifb [x + HANDLE_TYPE], TYPE_STR
        set pc, built_in_poke_str

    set push, x
    jsr int_to_int16
    set [j], x

    set pc, postamble_none

:built_in_poke_str
    set i, [x]
    add j, [i]
    sub j, 1
    add i, [i]

:built_in_poke_str_loop
    ife i, [x]
        set pc, postamble_none

    std [j], [i]
    set pc, built_in_poke_str_loop

;----------------------------------------------------------------
DAT 0, TYPE_INT
:built_in_read
;----------------------------------------------------------------
    jsr built_in_params

    ife [floppy], 0xffff
        jsr recover
        #doc read(): M35FD device not present error

    set push, [z-1]
    jsr int_to_int16

    set push, x
    jsr floppy__sector__read

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0, TYPE_INT
:built_in_write
;----------------------------------------------------------------
    jsr built_in_params

    ife [floppy], 0xffff
        jsr recover
        #doc write(): M35FD device not present error

    set push, [z-1]
    jsr int_to_int16

    set push, x
    jsr floppy__sector__write

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0xffff  ; disable parameter validation
:built_in_hsel
;----------------------------------------------------------------
    jsr built_in_params

    ife [hic], 0xffff
        jsr recover
        #doc hsel(): HIC device not present error

    ife i, 1
        set pc, built_in_hsel_port

    ifn i, 0
        jsr recover
        #doc hsel(): Wrong number of arguments error

    set a, 0
    set c, 0
    hwi [hic]

    ife c, 0xffff
        set pc, built_in_hsel_no_data

    set push, c
    jsr uint16_to_int
    set pc, postamble

:built_in_hsel_no_data
    set x, INT_N1
    set pc, postamble

:built_in_hsel_port
    set x, [z-1]
    ifc [x + HANDLE_TYPE], TYPE_INT
        jsr recover
        #doc hsel(): Illegal argument type error

    set push, x
    jsr int_to_int16
    set c, x

    set a, 0
    hwi [hic]

    set x, BOOL_FALSE
    ifb a, 0x0004
        set x, BOOL_TRUE

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT, TYPE_INT
:built_in_rconf
;----------------------------------------------------------------
    jsr built_in_params

    ife [rci], 0xffff
        jsr recover
        #doc rconf(): RCI device not present error

    set push, [z-1]
    jsr int_to_int16
    set b, x

    set push, [z-2]
    jsr int_to_int16
    set c, x

    set a, 3
    hwi [rci]

    set x, BOOL_TRUE
    ifb c, 0x0001
        set x, BOOL_FALSE

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT
:built_in_hinfo
;----------------------------------------------------------------
    jsr built_in_params

    ife [hic], 0xffff
        jsr recover
        #doc hinfo(): HIC device not present error

    set push, [z-1]
    jsr int_to_int16
    set push, x

    set a, 0
    set c, x
    hwi [hic]

    ifb a, 0x0008
        set pc, postamble_none

    ; -------------
    ; Get port name
    ; -------------
    set push, 8
    set push, TYPE_STR
    jsr array_create
    set [z-1], x
    set b, [x]
    add b, 1

    set a, 0x0004
    set c, pop
    hwi [hic]
    ifn c, 0x0000
        jsr recover
        #doc Port number out of bounds for hinfo

:built_in_hinfo_len_loop
    ife [b], 0
        set pc, built_in_hinfo_len_finish

    add b, 1
    set pc, built_in_hinfo_len_loop

:built_in_hinfo_len_finish
    set a, [x]
    sub b, a
    set [a], b
    sub [a], 1

    set push, x
    set push, b
    jsr realloc

    set x, [z-1]
    set pc, postamble

;----------------------------------------------------------------
DAT 0
:built_in_rinfo
;----------------------------------------------------------------
    jsr built_in_params

    ife [rci], 0xffff
        jsr recover
        #doc rinfo(): RCI device not present error

    ; get the info from device
    set a, 0
    hwi [rci]

    set push, a
    jsr uint16_to_int
    set [z-1], x

    set push, b
    jsr uint16_to_int
    set [z-2], x

    ; -------------
    ; Create return tuple (channel, power, antenna, device)
    ; -------------
    set push, 5
    set push, TYPE_TUPLE
    jsr array_create
    sti i, [x]

    sti [i], [z-1]
    sti [i], [z-2]

    set a, BOOL_FALSE
    ifb c, 0x0001
        set a, BOOL_TRUE
    sti [i], a

    set a, BOOL_TRUE
    ife c, 0xffe0
        set a, BOOL_FALSE
    sti [i], a

    set [i], BOOL_TRUE
    ife c, 0xfff0
        set [i], BOOL_FALSE

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT
:built_in_hrecv
;----------------------------------------------------------------
    jsr built_in_params

    ife [hic], 0xffff
        jsr recover
        #doc hrecv(): HIC device not present error

    set push, [z-1]
    jsr int_to_int16
    set c, x

    set a, 0x0001
    hwi [hic]
    ife c, 0x0002
        jsr recover
        #doc hrecv(): HIC fail, receive error

    set x, NONE
    ife c, 0x0003
        set pc, postamble

    set push, b
    jsr uint16_to_int

    set pc, postamble

;----------------------------------------------------------------
DAT 0
:built_in_rrecv
;----------------------------------------------------------------
    jsr built_in_params

    ife [rci], 0xffff
        jsr recover
        #doc rrecv(): RCI device not present error

    set a, 0x0001
    set b, MEM_FLOPPY_START
    hwi [rci]

    set x, NONE
    ifn c, 0x0000
        set pc, postamble

    set push, b
    set push, TYPE_STR
    jsr array_create

    set i, MEM_FLOPPY_START
    add b, i
    set j, [x]
    add j, 1

:built_in_rrecv_loop
    ife i, b
        set pc, postamble

    set [j], [i]
    sti pc, built_in_rrecv_loop

;----------------------------------------------------------------
DAT 0, TYPE_INT, TYPE_INT
:built_in_hsend
;----------------------------------------------------------------
    jsr built_in_params

    ife [hic], 0xffff
        jsr recover
        #doc hsend(): HIC device not present error

    set push, [z-1]
    jsr int_to_int16
    set c, x

    set push, [z-2]
    jsr int_to_int16
    set b, x

    set a, 0x0002
    hwi [hic]
    ifg c, 0x0001
        jsr recover
        #doc hsend(): Transmit buffer overflow, port is not connected or HIC is busy error

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0, TYPE_STR
:built_in_rsend
;----------------------------------------------------------------
    jsr built_in_params

    ife [rci], 0xffff
        jsr recover
        #doc rsend(): RCI device not present error

    set a, 2
    set b, [z-1]
    set b, [b]
    set c, [b]
    add b, 1
    hwi [rci]

    set x, BOOL_TRUE
    ifn c, 0
        set x, BOOL_FALSE

    set pc, postamble

;----------------------------------------------------------------
DAT 0
:built_in_hwn
;----------------------------------------------------------------
    jsr built_in_params

    hwn x

    set push, x
    jsr uint16_to_int

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT
:built_in_hwi
;----------------------------------------------------------------
    jsr built_in_params

    set push, z

    ; push first parameter value to stack
    set push, [z-1]
    jsr int_to_int16
    set push, x

    jsr load_registers

    hwi pop

    jsr save_registers
    set z, pop

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0, TYPE_INT
:built_in_hwq
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr int_to_int16
    hwq x

    set push, x
    set push, y
    set push, c
    set push, a
    set push, b

    set push, 3
    set push, TYPE_TUPLE
    jsr array_create
    set [z-1], x
    set a, x

    ; pop a
    jsr uint16_to_int
    set [z-2], x

    set push, x
    set push, INT_16
    jsr int_lshift

    ; pop b
    set a, [x]
    add a, [a]
    set [a], pop

    ; int to tuple
    set a, [z-1]
    set a, [a]
    set [a+1], x

    ; pop c
    jsr uint16_to_int
    set a, [z-1]
    set a, [a]
    set [a+2], x

    ; pop x
    jsr uint16_to_int
    set [z-2], x

    set push, x
    set push, INT_16
    jsr int_lshift

    ; pop y
    set a, [x]
    add a, [a]
    set [a], pop

    ; int to tuple
    set a, [z-1]
    set a, [a]
    set [a+3], x

    set x, [z-1]
    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_GROUP_INTEGER, TYPE_GROUP_INTEGER
:built_in_scroll
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr int_to_int16
    set push, x

    set push, [z-2]
    jsr int_to_int16
    set push, x

    jsr screen__scroll

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0, TYPE_INT
:built_in_sleep
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
        jsr int_to_int16

    jsr built_in_sleep__loop
    set pc, postamble_none

    :built_in_sleep__loop
        ife x, 0
            set pc, pop

        set i, 18
        :built_in_sleep__sec_loop
            ifn i, 0
                std pc, built_in_sleep__sec_loop

        sub x, 1
        set pc, built_in_sleep__loop

;----------------------------------------------------------------
DAT 0
:built_in_time
;----------------------------------------------------------------
    jsr built_in_params

    ife [timer], 0xffff
        jsr recover
        #doc time(): Timer device not present error

    set push, 7
    set push, TYPE_TUPLE
    jsr array_create
    set [z-1], x
    set j, [x]
    add j, [j]

    ; store fp
    set i, z

    set a, 0x10
    hwi [timer]

    set push, b ; year
    set push, c ; month
    shr [sp], 8
    set push, c ; day
    and [sp], 0xff
    set push, x ; hours
    shr [sp], 8
    set push, x ; minutes
    and [sp], 0xff
    set push, y ; secs
    set push, z ; ms

    ; restore fp
    set z, i

    ; ms
    jsr uint16_to_int
    std [j], x

    ; secs
    jsr uint16_to_int
    std [j], x

    ; minutes
    jsr uint16_to_int
    std [j], x

    ; hours
    jsr uint16_to_int
    std [j], x

    ; days
    jsr uint16_to_int
    std [j], x

    ; months
    jsr uint16_to_int
    std [j], x

    ; years
    jsr uint16_to_int
    std [j], x

    set x, [z-1]
    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_BOOL
:built_in_hires
;----------------------------------------------------------------
    jsr built_in_params

    ife [pixie], 0xffff
        jsr recover
        #doc hires(): No graphics mode support in monitor

    ife [z-1], BOOL_TRUE
        jsr hires__init
    ife [z-1], BOOL_FALSE
        jsr hires__finish

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0xffff
:built_in_sound
;----------------------------------------------------------------
    jsr built_in_params

    ife [speaker], 0xffff
        jsr recover
        #doc sound(): Speaker device not present error

    ifl i, 2
        ifg i, 3
            jsr recover
            #doc sound(): Wrong number of arguments error

    set x, [z-1]
    ifc [x + HANDLE_TYPE], TYPE_INT
        jsr recover
        #doc sound(): Illegal argument type error

    set push, x
    jsr int_to_int16
    set a, x

    set x, [z-2]
    ifc [x + HANDLE_TYPE], TYPE_INT
        jsr recover
        #doc sound(): Illegal argument type error

    set push, x
    jsr int_to_int16
    set b, x

    hwi [speaker]

    ife i, 2
        set pc, postamble_none

    set x, [z-3]
    ifc [x + HANDLE_TYPE], TYPE_INT
        jsr recover
        #doc sound(): Illegal argument type error

    set push, x
    jsr int_to_int16

    ife x, 0
        set pc, postamble_none

    jsr built_in_sleep__loop

    set b, 0
    hwi [speaker]

    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT, TYPE_INT, TYPE_INT
:built_in_plot
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-2]
    jsr int_to_int16
    ifg x, 95
        set pc, postamble_none
    set y, x

    set push, [z-3]
    jsr int_to_int16
    set c, x

    set push, [z-1]
    jsr int_to_int16
    ifg x, 127
        set pc, postamble_none

    jsr hires__point

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0, TYPE_INT, TYPE_INT
:built_in_point
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-2]
    jsr int_to_int16
    ifg x, 95
        set pc, BOOL_FALSE
    set y, x

    set push, [z-1]
    jsr int_to_int16
    ifg x, 127
        set pc, BOOL_FALSE

    jsr hires__get_point
    ife x, 0
        set pc, postamble_false

    set x, BOOL_TRUE
    set pc, postamble

:postamble_false
    set x, BOOL_TRUE
    set pc, postamble

;----------------------------------------------------------------
DAT 0, TYPE_INT, TYPE_INT, TYPE_INT, TYPE_INT
:built_in_circle
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr int_to_int16
    ifg x, 127
        set pc, postamble_none
    set push, x

    set push, [z-2]
    jsr int_to_int16
    ifg x, 95
        set pc, postamble_none
    set push, x

    set push, [z-3]
    jsr int_to_int16
    ifg x, 127
        set pc, postamble_none
    set push, x

    set push, [z-4]
    jsr int_to_int16
    set push, x

    jsr hires__circle

    set pc, postamble_none

;----------------------------------------------------------------
DAT 0, TYPE_INT, TYPE_INT, TYPE_INT, TYPE_INT, TYPE_INT
:built_in_line
;----------------------------------------------------------------
    jsr built_in_params

    set push, [z-1]
    jsr int_to_int16
    ifg x, 127
        set pc, postamble_none
    set push, x

    set push, [z-2]
    jsr int_to_int16
    ifg x, 95
        set pc, postamble_none
    set push, x

    set push, [z-3]
    jsr int_to_int16
    ifg x, 127
        set pc, postamble_none
    set push, x

    set push, [z-4]
    jsr int_to_int16
    ifg x, 95
        set pc, postamble_none
    set push, x

    set push, [z-5]
    jsr int_to_int16
    set push, x

    jsr hires__line

    set pc, postamble_none

;----------------------------------------------------------------
:built_in_params
; util function used by built-in impls to parse arguments
;----------------------------------------------------------------
    set i, 0    ; param counter

:built_in_params_loop
    jsr lexer_next    ; skip '(' or ','

    ife i, 5
        set pc, built_in_params_end
    ife [lexer_token], token_rparen
        set pc, built_in_params_end

    set push, 0x0030
    jsr expression

    sti a, z
    sub a, i
    set [a], x

    set push, x
    jsr eval
    set [a], x


    ife [lexer_token], token_comma
        set pc, built_in_params_loop

:built_in_params_end
    set push, token_rparen
    jsr lexer_advance    ; skip ')'

    set a, [sp]
    sub a, 3
    ife [a], 0xffff
        ; disable parameter checking
        set pc, pop

    set b, z
    sub b, i

:built_in_params_type_loop
    ife [a], 0
        set pc, built_in_params_type_end

    set x, [b]
    ifc [a], [x + HANDLE_TYPE]
        jsr recover
        #doc Type mismatch error

    sub a, 1
    add b, 1
    set pc, built_in_params_type_loop

:built_in_params_type_end
    ife b, z
        set pc, pop
    jsr recover
    #doc Illegal parameter list error
