:interpreter_main
    set push, 0
    set push, 5
    jsr preamble
    
    set [recovery_fp], z
    set [recovery_sp], sp

    jsr detect_hardware
    jsr screen_select
    jsr screen_clear

    set push, 10
    set push, TYPE_DICT
    jsr alloc
    set [z-1], x

    set [global_scope], x
    set [current_scope], x

    set push, 20
    set push, TYPE_LIST
    jsr alloc
    set [z-4], x
    
    set [builtin], x

    set push, HISTORY_SIZE+1
    set push, TYPE_LIST
    jsr array_create
    set [z-5], x

    ; setup interpreter history
    set [history], x

    ; init fpu
    jsr float_init    

    set push, STR_STARTUP
    jsr print

    set push, STR_STARTUP2
    jsr print
    
    jsr mark
    jsr compact

    set a, [heap_handle_start]
    sub a, [heap_free_start]
    
    set push, a
    jsr uint16_to_int
    
    set push, x
    jsr print

    set push, STR_STARTUP3
    jsr print

:interpreter_loop
    set push, STR_PROMPT
    jsr print

    jsr interpreter__line_edit
    set [z-2], x
    
    set c, 10
    jsr screen_add_char
    
    jsr lexer_init

:interpreter_loop_parse
    jsr parser_stmt
    set [z-3], x

    ife [x+1], TYPE_VOID
        set pc, interpreter_loop_parse_2
    
    set push, x
    jsr eval
    set [z-3], x

;    set push, x
;    jsr print_repr

;    set c, 10
;    jsr screen_add_char

:interpreter_loop_parse_2
    ifn [lexer_token], token_eof
        set pc, interpreter_loop_parse
    
    set pc, interpreter_loop

;----------------------------------------------------------------
; struct handle *scope_get(struct handle *dict, struct handle *key)
; return value from scope or any of the ancestor scopes
;----------------------------------------------------------------
:scope_get
    set push, 2
    set push, 0
    jsr preamble
    
    set push, [z+11]
    set push, [z+10]
    jsr dict_get
    
    ifn x, 0
        jsr postamble
        
    set push, [z+11]
    set push, STR_UNDERSCORE
    jsr dict_get
    
    ife x, 0
        jsr postamble
        
    set push, x
    set push, [z+10]
    jsr scope_get
    
    jsr postamble
    
;----------------------------------------------------------------
; void scope_del(struct handle *dict, struct handle *key)
; delete value from scope or closest ancestor scope
;----------------------------------------------------------------
:scope_del
    set push, 2
    set push, 0
    jsr preamble
    
    set push, [z+11]
    set push, [z+10]
    jsr dict_del
    
    ifn x, 0
        jsr postamble
        
    set push, [z+11]
    set push, STR_UNDERSCORE
    jsr dict_get
    
    ife x, 0
        jsr recover
        
    set push, x
    set push, [z + 10]
    jsr scope_del
    
    jsr postamble
    
;----------------------------------------------------------------
; void scope_set(struct handle *dict, struct handle *key, struct handle *value, uint16 mode)
; mode: SCOPE_MODE_UPDATE | SCOPE_MODE_INSERT
;----------------------------------------------------------------
:scope_set
    set push, 4
    set push, 0
    jsr preamble    

    set push, [z+13]
    set push, [z+12]
    jsr dict_get
    
    ifn x, 0
        set pc, scope_set_insert
        
    set push, [z+13]
    set push, STR_UNDERSCORE
    jsr dict_get
    
    ife x, 0                            ; no parent found
        set pc, scope_set_no_parent

    ; parent found
    set push, x                            ; call parent
    set push, [z+12]                    ; key
    set push, [z+11]                    ; value
    set push, SCOPE_MODE_UPDATE
    jsr scope_set
    
    ifn x, 0
        jsr postamble

:scope_set_no_parent
    ife [z+10], SCOPE_MODE_UPDATE
        jsr postamble

:scope_set_insert
    set push, [z+13]
    set push, [z+12]
    set push, [z+11]
    jsr dict__set

    set x, 1
    jsr postamble
    
;----------------------------------------------------------------
:recover
; fastcall
;----------------------------------------------------------------
    set a, pop
    set z, [recovery_fp]
    set sp, [recovery_sp]

    set [current_scope], [global_scope]

    set push, STR_ERROR
    jsr print

    set push, a
    jsr debug
    
    set c, 10
    jsr screen_add_char

    jsr lexer__get_line
    set push, x
    jsr print

    set c, 10
    jsr screen_add_char

;    jsr lexer__get_token_marker
;    set push, x
;    jsr print
    
;    set c, 10
;    jsr screen_add_char

    set pc, interpreter_loop

;----------------------------------------------------------------
:interpreter__line_edit
    set push, 0
    set push, 1
    jsr preamble
    
    set y, [current_screen]
    set [line_editor__buf_index], HISTORY_SIZE
    set [line_editor__start_addr], [y + SCREEN__CURSOR]
    set [line_editor__current_addr], [y + SCREEN__CURSOR]
    set [line_editor__end_addr], [y + SCREEN__CURSOR]
    set [line_editor__last_char], 0

:interpreter__line_edit_main_loop
    set [y + SCREEN__CURSOR], [line_editor__current_addr]

    set c, [line_editor__last_char]

    jsr screen_toggle_cursor
    jsr win_getchar
    jsr screen_toggle_cursor

    set [line_editor__last_char], c

    ife c, KEY_UP
        set pc, interpreter__line_edit__key_up
    ife c, KEY_DOWN
        set pc, interpreter__line_edit__key_down
    ife c, KEY_LEFT
        set pc, interpreter__line_edit__key_left
    ife c, KEY_RIGHT
        set pc, interpreter__line_edit__key_right
    ife c, KEY_DEL
        set pc, interpreter__line_edit__key_del
    ife c, KEY_BS
        set pc, interpreter__line_edit__key_bs
    ife c, KEY_NEWLINE
        set pc, interpreter__line_edit__key_newline
    ifg c, 0x19
        ifl c, 0x7f
            set pc, interpreter__line_edit__key_character

    set pc, interpreter__line_edit_main_loop

;----------------------------------------------------------------
:interpreter__line_edit__key_up
;----------------------------------------------------------------
    ; return if already oldest line
    ife [line_editor__buf_index], 0
        set pc, interpreter__line_edit_main_loop

    set a, [history]
    set a, [a]
    add a, [line_editor__buf_index]
    ife [a], 0
        set pc, interpreter__line_edit_main_loop

    set push, -1

    set pc, interpreter__line_edit__history

;----------------------------------------------------------------
:interpreter__line_edit__key_down
;----------------------------------------------------------------
    ; return if already last line
    ife [line_editor__buf_index], HISTORY_SIZE
        set pc, interpreter__line_edit_main_loop

    set push, 1
    
    set pc, interpreter__line_edit__history

;----------------------------------------------------------------
:interpreter__line_edit__history
;----------------------------------------------------------------
    ; get current line as str
    jsr interpreter__line_edit__get_str
    
    ; clear the current line
    set i, [line_editor__start_addr]
    set a, [line_editor__end_addr]
    
    :interpreter__line_edit__key_up__loop1
        ife i, a
            set pc, interpreter__line_edit__key_up__break1
        set [i], 0
        sti pc, interpreter__line_edit__key_up__loop1
    :interpreter__line_edit__key_up__break1

    ; store current line to history
    set a, [history]
    set b, [line_editor__buf_index]
    set c, x
    jsr array__set
        
    ; select older item
    add [line_editor__buf_index], pop

    ; get current line
    set a, [history]
    set b, [line_editor__buf_index]
    jsr array__get

    ; move cursor to start location
    set [y + SCREEN__CURSOR], [line_editor__start_addr]
    set [line_editor__current_addr], [line_editor__start_addr]
    set [line_editor__end_addr], [line_editor__start_addr]

    set i, [x]
    sti b, i
    add b, [b]

    :interpreter__line_edit__key_up__loop2
        ife i, b
            set pc, interpreter__line_edit_main_loop
        ifg i, b
            set pc, interpreter__line_edit_main_loop
        
        set push, [i]
        jsr interpreter__line_edit__draw_char

        sti pc, interpreter__line_edit__key_up__loop2

;----------------------------------------------------------------
:interpreter__line_edit__key_bs
;----------------------------------------------------------------
    ife [line_editor__start_addr], [line_editor__current_addr]
        set pc, interpreter__line_edit_main_loop

    sub [line_editor__current_addr], 1

    ; join key_del
    
;----------------------------------------------------------------
:interpreter__line_edit__key_del
;----------------------------------------------------------------
    ife [line_editor__current_addr], [line_editor__end_addr]
        set pc, interpreter__line_edit_main_loop

    set i, [line_editor__current_addr]
    
:interpreter__line_edit__del_char__loop
    ife i, [line_editor__end_addr]
        set pc, interpreter__line_edit__del_char__break
        
    set [i], [i+1]
    add i, 1
    set pc, interpreter__line_edit__del_char__loop

:interpreter__line_edit__del_char__break
    set i, [line_editor__end_addr]
    set [i], 0
    sub [line_editor__end_addr], 1

    set pc, interpreter__line_edit_main_loop

;----------------------------------------------------------------
:interpreter__line_edit__key_newline
;----------------------------------------------------------------
    jsr interpreter__line_edit__get_str

    set a, [x]
    ifl [a], 2
        set pc, interpreter__line_edit__key_newline__finish

    set a, [history]
    set b, HISTORY_SIZE - 1
    jsr array__get

    ife x, 0
        set pc, interpreter__line_edit__key_newline__store

    set push, x
    set push, [z-1]
    jsr val_cmp
    
    ife x, 0
        set pc, interpreter__line_edit__key_newline__finish

:interpreter__line_edit__key_newline__store
    set b, HISTORY_SIZE
    set c, [z-1]
    jsr array__set

    ; shift command history (HISTORY_SIZE must be >1)
    set a, [history]                    ; struct handle *
    set a, [a]                            ; struct list *
    set i, a

    add a, [a]                            ; history[-1]
    add i, 2                            ; history[1]

    :interpreter__line_edit__history_loop
    set [i-1], [i]
    ifl i, a
        sti pc, interpreter__line_edit__history_loop

:interpreter__line_edit__key_newline__finish
    set x, [z-1]
    set pc, postamble
        
;----------------------------------------------------------------
:interpreter__line_edit__key_right
;----------------------------------------------------------------
    ifl [line_editor__current_addr], [line_editor__end_addr]
        add [line_editor__current_addr], 1
    
    set pc, interpreter__line_edit_main_loop

;----------------------------------------------------------------
:interpreter__line_edit__key_left
;----------------------------------------------------------------
    ifg [line_editor__current_addr], [line_editor__start_addr]
        sub [line_editor__current_addr], 1
    
    set pc, interpreter__line_edit_main_loop
    

;----------------------------------------------------------------
:interpreter__line_edit__key_character
;----------------------------------------------------------------
    set j, [line_editor__end_addr]
    set i, [line_editor__current_addr]
    
    :interpreter__line_edit__key_character__loop
        ife i, j
            set pc, interpreter__line_edit__key_character__break

        set [j], [j-1]

        sub j, 1
        set pc, interpreter__line_edit__key_character__loop

    :interpreter__line_edit__key_character__break
        set push, c
        jsr interpreter__line_edit__draw_char

    set pc, interpreter__line_edit_main_loop

;----------------------------------------------------------------
:interpreter__line_edit__draw_char
;----------------------------------------------------------------
    bor [sp+1], FONT_COLOR
    set x, [line_editor__current_addr]
    set [x], [sp+1]

    set [sp], pop
        
    add [line_editor__current_addr], 1
    add [line_editor__end_addr], 1

    ifl [line_editor__end_addr], [y + SCREEN__END]
        set pc, pop

    set push, 0
    set push, -1
    jsr screen__scroll
    
    sub [line_editor__start_addr], SCREEN_COLS
    sub [line_editor__current_addr], SCREEN_COLS
    sub [line_editor__end_addr], SCREEN_COLS
    
    ifl [line_editor__start_addr], [y + SCREEN__START]
        set [line_editor__start_addr], [y + SCREEN__START]

    ifl [line_editor__current_addr], [line_editor__start_addr]
        set [line_editor__current_addr], [line_editor__start_addr]

    set pc, pop

;----------------------------------------------------------------
:interpreter__line_edit__get_str
;----------------------------------------------------------------
    set push, i
    set push, j

    set i, [line_editor__end_addr]

    set push, i
    sub [sp], [line_editor__start_addr]
    add [sp], 1

    set push, TYPE_STR
    jsr array_create
    set [z-1], x

    set j, [x]                    ; struct string *
    add j, [j]                    ; string[last]
    std [j], KEY_NEWLINE        ; set newline, set i = end - 1, set j before newline

:interpreter__line_edit__get_str__loop
    ifl i, [line_editor__start_addr]
        set pc, interpreter__line_edit__get_str__finish
    set [j], [i]
    and [j], 0x007f
    
    std pc, interpreter__line_edit__get_str__loop

:interpreter__line_edit__get_str__finish
    set j, pop
    set i, pop
    set pc, pop

