;----------------------------------------------------------------
; struct handle *int_create(uint16 len)
;----------------------------------------------------------------
:int_create
	set push, 1
	set push, 0
	jsr preamble

	std push, [z+10]		; size
	set push, TYPE_INT
	jsr alloc
	
	set c, [x]
	set [c + INT_LEN], [z+10]

	jsr postamble

;----------------------------------------------------------------
; struct handle *int16_to_int(int16 value)
;----------------------------------------------------------------
:int16_to_int
	set push, 1
	set push, 0
	jsr preamble

	set c, 1
	set pc, uint16_to_int_alloc

;----------------------------------------------------------------
; struct handle *uint16_to_int(uint16 value)
;----------------------------------------------------------------
:uint16_to_int
	set push, 1
	set push, 0
	jsr preamble

	set c, 1
	ifb [z+10], 0x8000
		set c, 2

:uint16_to_int_alloc
	set push, c		; size
	set push, TYPE_INT
	jsr alloc
	
	set a, [x]
	set [a], c
	add a, c
	set [a], [z+10]

	jsr postamble

;----------------------------------------------------------------
; struct handle *int_to_int16(struct handle *integer)
;----------------------------------------------------------------
:int_to_int16
	set x, [sp+1]
	set x, [x]
	add x, [x]
	set x, [x]
	
	set [sp], pop	; move rts over arg
	set pc, pop

;----------------------------------------------------------------
; extern struct handle *int_parse(struct handle *string)
;
; Parses the start of string str interpreting its content as an 
; integer.
; 
; Return pointer to int handle or 0 if error
;----------------------------------------------------------------
:int_parse
	set push, 1			; sizeof(args)
	set push, 1			; sizeof(refs)
	jsr preamble

	set [z+-1], INT_HANDLE_0

	set a, [z+10]		; struct handle *str
	set b, 0			; index
	set y, FALSE		; negative flag

	jsr array_get
	ifn [x + lexer_table], lexer_char_minus
		set pc, int_parse_loop

	set y, TRUE
	add b, 1
	jsr array_get
			
:int_parse_loop
	set c, x

	ifn [c + lexer_table], lexer_char_digit
		set pc, int_parse_sign

	set push, INT_HANDLE_10
	set push, [z+-1]
	jsr int_mul
	set [z+-1], x

	sub c, '0'						; convert char to int
	shl c, 1
	add c, INT_HANDLE

	set push, [z+-1]
	set push, c
	jsr int_add	
	set [z+-1], x
	
	add b, 1
	jsr array_get
	set pc, int_parse_loop	

:int_parse_sign
	set x, [z+-1]
	ife y, FALSE
		set pc, postamble

	set push, [z+-1]
	jsr int_negate

	set pc, postamble

;----------------------------------------------------------------
; extern struct handle *int_to_str(struct handle *integer)
; local variable space
;   [ -1] REF temp
;----------------------------------------------------------------
:int_to_str
	set push, 1
	set push, 1
	jsr preamble

	set push, [z+10]
	jsr int_abs
	set [z+-1], x

	; character count
	set i, 0

:int_to_str_loop
	set push, [z+-1]
	set push, INT_HANDLE_10
	jsr int_division
	set [z+-1], x

	set a, [x]	; struct list *tuple
	set b, [a + INT_DIVISION_REMAINDER]	; struct handle *remainder
	set b, [b]	; struct int *remainder
	add b, [b]	; remainder lsw *
	set b, [b]	; remainder lsw
	add b, '0'
	sti push, b

	set [z+-1], [a + INT_DIVISION_QUOTIENT]

	set push, [z+-1]
	jsr int_sgn

	ifn x, 0
		set pc, int_to_str_loop

	; add minus sign
	set push, [z+10]
	jsr int_sgn

	ifn x, -1
		set pc, allocate_chars

	sti push, '-'

:allocate_chars
	set push, i
	set push, TYPE_STRING
	jsr alloc
	set [z+-1], x

	set a, [x]	; struct string *
	set [a], i  ; set str length

	set j, a

	add a, i

:itoa_reverse_string
	sti [j+1], pop
	
	ifn j, a
		set pc, itoa_reverse_string

	jsr postamble

;----------------------------------------------------------------
; extern struct handle *int_random(struct handle *min, struct handle *max)
;----------------------------------------------------------------
:int_random
	set push, 2
	set push, 2
	jsr preamble
	
	set a, [z+10]
	set a, [a]
	
	set push, [a]
	jsr int_create
	set [z+-1], x
	
	set a, [x]
	set i, a
	add i, [i]
	add a, 1
	
:int_random_loop
	jsr int_rnd_lfsr
;	jsr int_rnd_lcg
	ife i, a
		and x, 0x7fff
	set [i], x
	ifg i, a
		std pc, int_random_loop

	set push, [z+10]
	set push, [z+11]
	jsr int_sub
	set [z-2], x

	set push, [z+-1]
	set push, [z+-2]
	jsr int_division
	
	set x, [x]
	set [z+-1], [x + INT_DIVISION_REMAINDER]

	set push, [z+11]
	set push, [z+-1]
	jsr int_add

	set pc, postamble

;----------------------------------------------------------------
; kirinyaga's "Linear feedback shift register" pseudo random number generator
; 
; output every number twice per period. 
; return the higher 16bits out of 17. 
; 
; out A: 0000-FFFF 
; 
; uses 0 word from stack 
; 13 words / 14 cycles 
;----------------------------------------------------------------
:int_rnd_lfsr ; return pseudo-random 0000-FFFF in x 
	set x, [rnd_lfsr_seed] 
	shr x, 1 
	bor x, [rnd_lfsr_seed + 1] 
	set [rnd_lfsr_seed + 1], ex 
	ifn ex, 0 
		xor x, [rnd_lfsr_poly] 
	set [rnd_lfsr_seed], x 
	set pc, pop 

;----------------------------------------------------------------
; Entroper's Linear congruential generator
; Generates random words, using two words of state.
; Based on the algorithm described here:
; http://6502.org/source/integers/random/random.html 
; Sets x to a 16-bit PRN.
;----------------------------------------------------------------
:int_rnd_lcg
	; 0x0019660D x seed + 1
	set push, a
	set a, [rnd_lcg_seed]
	set x, [rnd_lcg_seed + 1]
	mul x, 0x660D
	mul a, 0x0019
	mul [rnd_lcg_seed], 0x660D
	adx x, a
	add [rnd_lcg_seed], 1
	add x, ex
	set [rnd_lcg_seed + 1], x
	set a, pop
	set pc, pop

;----------------------------------------------------------------
; extern struct handle *int_bitwise_or(struct handle *i1, struct handle *i2)
;----------------------------------------------------------------
:int_bitwise_or
	set push, 2
	set push, 2
	jsr preamble

	set y, int_bitwise_or

:int_bitwise
	set a, [z+11]
	set a, [a]
	set b, [z+10]
	set b, [b]

	; max len
	set c, [a]
	ifg [b], c
		set c, [b]

	set push, [z+10]
	set push, c
	jsr int_extend
	set [z+-2], x
	set b, x
	set b, [b]
	set j, b
	add j, [j]

	set push, [z+11]
	set push, c
	jsr int_extend
	set [z+-1], x
	set a, x
	set a, [a]
	set i, a
	add i, [i]

:int_bitwise_loop
	ife i, a
		set pc, int_bitwise_break

	ife y, int_bitwise_or
		bor [i], [j]
	ife y, int_bitwise_xor
		xor [i], [j]
	ife y, int_bitwise_and
		and [i], [j]
	std pc, int_bitwise_loop

:int_bitwise_break
	set push, x
	jsr int_normalize
	
	set pc, postamble

;----------------------------------------------------------------
; extern struct handle *int_bitwise_xor(struct handle *i1, struct handle *i2)
;----------------------------------------------------------------
:int_bitwise_xor
	set push, 2
	set push, 0
	jsr preamble

	set y, int_bitwise_xor
	set pc, int_bitwise

;----------------------------------------------------------------
; extern struct handle *int_bitwise_and(struct handle *i1, struct handle *i2)
;----------------------------------------------------------------
:int_bitwise_and
	set push, 2
	set push, 0
	jsr preamble
	
	set y, int_bitwise_and
	set pc, int_bitwise

;----------------------------------------------------------------
; extern struct handle *int_lshift(struct handle *i1, struct handle *i2)
;----------------------------------------------------------------
:int_lshift
	set push, 2
	set push, 1
	jsr preamble

	set push, [z+10]
	jsr int_to_int16

	; number of words to add to tail
	set a, x
	div a, 16

	; number of bits to shift
	set b, x
	mod b, 16
	
	set c, [z+11]	; struct handle *int
	set c, [c]		; struct int *base

	set c, [c]		; orig size
	add c, a		; new words
	add c, 1		; one for shift overflow
	
	set push, [z+11]
	set push, c
	jsr int_extend
	set [z+-1], x

	; x: struct handle *new
	; c: size of new int
	; a: number of words to shift
	; b: number of bits to shift
	set i, [x]
	set j, [x]
	add c, [x]
	
	add j, a
	add j, 2
	
	shl [i+1], b

:int_lshift_loop
	set y, [j]
	set [j], 0
	set [i+2], y
	
	shl [i+2], b
	bor [i+1], ex
	
	ifl j, c
		sti pc, int_lshift_loop

	; the end
	set push, x
	jsr int_normalize	

	set pc, postamble

:int_rshift_by_uint
	set push, 2
	set push, 1
	jsr preamble

	set x, [z+10]
	set pc, int_rshift_join

;----------------------------------------------------------------
; extern struct handle *int_rshift(struct handle *i1, struct handle *i2)
;----------------------------------------------------------------
:int_rshift
	set push, 2
	set push, 1
	jsr preamble
	
	set push, [z+10]
	jsr int_to_int16

:int_rshift_join
	; number of words to add to tail
	set a, x
	div a, 16

	; number of bits to shift
	set b, x
	mod b, 16
	
	set c, [z+11]	; struct handle *int
	set c, [c]		; struct int *base

	set c, [c]		; orig size

	ifl a, c
		set pc, int_rshift_real

	set x, INT_HANDLE_0
	set pc, postamble

:int_rshift_real
	sub c, a
	
	set i, [z+11]
	set i, [i]
	add i, c		; src[-1]

	set push, c
	jsr int_create
	set a, [x]
	add a, 1		; dst[0]

	add c, [x]		; dst[-1]
	set j, c		; dst[-1]

:int_rshift_loop
	set [j], [i]
	ife a, j
		asr [j], b
	ifn a, j
		shr [j], b
	ifn c, j
		bor [j+1], ex

	ifn a, j
		std pc, int_rshift_loop	
	
	set push, x
	jsr int_normalize	
	set pc, postamble

;----------------------------------------------------------------
; extern struct handle *int_abs(struct handle *integer)
;----------------------------------------------------------------
:int_abs
	set push, 1
	set push, 0
	jsr preamble

	set x, [z+10]
	set a, [x]
	ifc [a+1], 0x8000
		jsr postamble

	set push, x
	jsr int_negate

	jsr postamble

;----------------------------------------------------------------
; extern struct handle *int_complement(struct handle *integer)
; bitwise complement -1 <-> 0
;----------------------------------------------------------------
:int_complement
	set push, 1
	set push, 1
	jsr preamble

	set b, 0

	set pc, int_negate_or_complement

;----------------------------------------------------------------
; extern struct handle *int_negate(struct handle *integer)
; arithmetic negative -1 <-> +1
;----------------------------------------------------------------
:int_negate
	set push, 1
	set push, 1
	jsr preamble

	set b, 1

:int_negate_or_complement
	set i, [z+10]	; struct handle *
	set i, [i]	; struct int *

	set push, [i]	; len
	jsr int_create	
	set [z+-1], x
	set a, [x]	; struct int *

	add i, [i]	; i: orig lsw

	set j, a	; j: new lsw
	add j, [a]

:xor_loop
	set [j], [i]
	xor [j], 0xffff
	add [j], b
	std b, ex
	ifn j, a
		set pc, xor_loop

	jsr postamble

;----------------------------------------------------------------
; extern int16 int_sgn(struct handle *integer)
; 
; return 
;   -1 if integer < 0
;    0 if integer = 0
;   +1 if integer > 0
;----------------------------------------------------------------
:int_sgn
	set push, 1
	set push, 0
	jsr preamble

	set a, [z+10]
	set a, [a]

	; sign comparison
	ifb [a + INT_DATA], 0x8000
		set x, -1
			
	ifc [a + INT_DATA], 0x8000
		set x, 1

	ife [a + INT_LEN], 1
		ife [a + INT_DATA], 0
			set x, 0

	jsr postamble

;----------------------------------------------------------------
; extern int16 int_cmp(struct handle *left, struct handle *right)
; 
; return 
;   -1 if left < right
;    0 if left = right
;   +1 if left > right
;----------------------------------------------------------------
:int_cmp
	set push, 2
	set push, 0
	jsr preamble

	set i, [z+11]
	set i, [i]		; struct int *left

	set j, [z+10]
	set j, [j]		; struct int *right

	; sign comparison
	ifb [i + INT_DATA], 0x8000
		ifc [j + INT_DATA], 0x8000
			set pc, int_cmp_lt
			
	ifc [i + INT_DATA], 0x8000
		ifb [j + INT_DATA], 0x8000
			set pc, int_cmp_gt

	; length comparison
	; for negative numbers, long is less than short
	ifb [i + INT_DATA], 0x8000 ; if negative
		ifg [i], [j]
			set pc, int_cmp_lt

	ifb [i + INT_DATA], 0x8000 ; if negative
		ifl [i], [j]
			set pc, int_cmp_gt

	; for positive numbers, long is greater than short
	ifc [i + INT_DATA], 0x8000 ; if positive
		ifg [i], [j]
			set pc, int_cmp_gt

	ifc [i + INT_DATA], 0x8000 ; if positive
		ifl [i], [j]
			set pc, int_cmp_lt

	; compare each word
	set a, i
	add a, [a]

:int_cmp_loop			
	sti x, x
	ifg [i], [j]
		set pc, int_cmp_gt
	ifl [i], [j]
		set pc, int_cmp_lt
	ifn i, a
		set pc, int_cmp_loop

	set x, 0
	jsr postamble

:int_cmp_lt
	set x, -1
	jsr postamble
	
:int_cmp_gt
	set x, 1
	jsr postamble

;----------------------------------------------------------------
; extern struct handle *int_sub(struct handle *minuend, struct handle *subtrahend)
;----------------------------------------------------------------
:int_sub
	set push, 2
	set push, 1
	jsr preamble

	set push, [z+10]           ; negate subtrahend
	jsr int_negate
	set [z+-1], x

	set push, [z+11]
	set push, [z+-1]
	jsr int_add

	jsr postamble

;----------------------------------------------------------------
; extern struct handle *int_add(struct handle *term1, struct handle *term2)
;----------------------------------------------------------------
:int_add
	set push, 2
	set push, 1
	jsr preamble

	set a, [z+11]	; struct handle *term1
	set a, [a]		; a: struct int *term1

	set i, a		; ptr to len
	add i, [a]		; i: ptr to lsw

	set b, [z+10]	; struct handle *term2
	set b, [b]		; b: struct int *term2

	set j, b		; ptr to len
	add j, [b]		; j: ptr to lsw

	; lsw + lsw
	set c, 1		; c: number of words in result
	set y, [i]		; y: current sum
	add y, [j]
	set x, ex
	set push, y

:int_add_loop
	std y, x		; init sum with previous carry, and move indexes toward msw

	; --------- term 1 ---------	
	set x, [a+1]	; x: default value for term1 current word (no data)
	asr x, 15		; sign extension

	ifg i, a		; ...use real value if more words are available
		set x, [i]

	add y, x		; add term1 word to sum
	
	; --------- term 2 ---------	
	set x, [b+1]	; do the same for term2
	asr x, 15
	
	ifg j, b
		set x, [j]
		
	add y, x
	set x, ex

	; ---------  ---------	
	set push, y		; push current sum
	add c, 1		; add word counter

	ifl a, i		; continue if more words available in term1
		set pc, int_add_loop

	ifl b, j		; continue if more words available in term2
		set pc, int_add_loop
	; ---------  ---------	
	set push, c
	jsr int_create
	set [z+-1], x
	
	sti i, [x]
	add c, i

:int_add_copy_loop
	sti [i], pop
	ifn i, c
		set pc, int_add_copy_loop

	set push, [z+-1]
	jsr int_normalize

	jsr postamble

;----------------------------------------------------------------
; extern struct handle *int_pow(struct handle *factor1, struct handle *factor2)
;----------------------------------------------------------------
:int_pow
	set push, 2
	set push, 2
	jsr preamble

	set push, [z+10]
	jsr int_sgn
	
	ife x, 0
		set pc, int_pow_1
	ife x, -1
		set pc, int_pow_0

	set push, [z+10]
	jsr int_to_int16
	set c, x

	set [z+-1], [z+11] ; p
	set [z+-2], INT_HANDLE_1	; r
	
:int_pow_loop
	ife c, 0
		set pc, int_pow_break

	ifc c, 1
		set pc, int_pow_skip
		
	set push, [z+-2]
	set push, [z+-1]
	jsr int_mul
	set [z+-2], x
	
:int_pow_skip
	set push, [z+-1]
	set push, [z+-1]
	jsr int_mul
	set [z+-1], x

	div c, 2
	set pc, int_pow_loop

:int_pow_break
	set x, [z+-2]
	set pc, postamble	

:int_pow_0
	set x, INT_HANDLE_0
	set pc, postamble
:int_pow_1
	set x, INT_HANDLE_1
	set pc, postamble

;----------------------------------------------------------------
; extern struct handle *int_mul(struct handle *factor1, struct handle *factor2)
;----------------------------------------------------------------
:int_mul
	set push, 2
	set push, 3
	jsr preamble

	set push, [z+11]	; struct handle *factor1
	jsr int_abs
	set [z+-1], x		; struct handle *f1
	set a, [x]			; a: struct int *f1

	set i, a
	add i, [a]			; i: lsw of f1
	
	set push, [z+10]	; struct handle *factor2
	jsr int_abs
	set [z+-2], x		; struct handle *f2
	set b, [x]			; b: struct int *f2

	set j, b			; j: lsw of f2
	add j, [b]
	
	set c, [a]			; max product size
	add c, [b]

	set push, c
	jsr int_create
	set [z+-3], x
	
	set c, [x]
	add c, [c]			; c: product lsw

	; a: struct int *factor1 
	; b: struct int *factor2
	; c: product current word *
	; i: factor1 current word *
	; j: factor2 current word *
	; x: product word
:int_mul_words_loop
	set x, [j]
	mul x, [i]

	set y, ex		; store product high
	add [c], x		; add product low
	adx [c+-1], y	; add product high
	set x, ex

	set y, c		; y: product current word
	sub y, 2
:int_mul_carry_loop
	ife x, 0
		set pc, int_mul_carry_break
	add [y], x
	set x, ex	
	sub y, 1
	set pc, int_mul_carry_loop

:int_mul_carry_break
	sub j, 1		; move f2 cword towards msw
	sub c, 1		; move product cword towards msw

	ifn j, b		; if f2 cword not out of bounds
		set pc, int_mul_words_loop

	add j, [b]		; set f2 cword back to lsw
	add c, [b]		; move product cword back the same amount
	
	sub i, 1		; move f1 cwords towards msw
	sub c, 1		; move product cword towards msw
	
	ifn i, a		; if f1 cword not out of bounds
		set pc, int_mul_words_loop

	; all multiplications done here

	set push, [z+-3]
	jsr int_normalize
	set [z+-3], x

	set push, [z+10]	; factor 2 sign
	jsr int_sgn
	set a, x
	
	set push, [z+11]	; factor 1 sign
	jsr int_sgn
	xor a, x

	set x, [z+-3]
	ifc a, 0x8000
		jsr postamble

	; negate product
	set push, [z+-3]
	jsr int_negate
	
	jsr postamble

;----------------------------------------------------------------
; extern struct handle *int_div(struct handle *divident, struct handle *divisor)
;----------------------------------------------------------------
:int_div
	set push, 2
	set push, 0
	jsr preamble
    
	set push, [z+11]
	set push, [z+10]
	jsr int_division

	set x, [x]
	set x, [x + INT_DIVISION_QUOTIENT]
	jsr postamble

;----------------------------------------------------------------
; extern struct handle *int_mod(struct handle *divident, struct handle *divisor)
;----------------------------------------------------------------
:int_mod
	set push, 2
	set push, 0
	jsr preamble
    
	set push, [z+11]
	set push, [z+10]
	jsr int_division

	set x, [x]
	set x, [x + INT_DIVISION_REMAINDER]
	jsr postamble
	
;----------------------------------------------------------------
; struct handle *int_division(struct handle *divident, struct handle *divisor)
; return x: (struct handle *quotient, struct handle *remainder)
;  todo optimize shifts only to one word and aggregate 16 shifts
;  as word copy
; references
; [z+-1] quotient
; [z+-2] divisor
; [z+-3] remainder
;----------------------------------------------------------------
:int_division
	set push, 2
	set push, 3
	jsr preamble

	set push, [z+11]
	jsr int_abs
	set [z+-1], x
	set a, x

	set push, [z+10]
	jsr int_abs
	set [z+-2], x

	set a, [a]
	set b, [x]

	; max len
	set c, [a]
	ifg [b], [a]
		set c, [b]

	set push, [z+-1]
	set push, c
	jsr int_extend
	set [z+-1], x	; quotient
	set a, x

	set push, [z+-2]
	set push, c
	jsr int_extend
	set [z+-2], x	; divisor
	set b, x

	set push, c
	jsr int_create
	set [z+-3], x	; remainder
	set c, [x]

	set a, [a]
	set b, [b]

	set y, [a]	; y: bits left
	shl y, 4	; words * 16 = bits

:division_loop
	ife y, 0
		set pc, division_finish
	sub y, 1

	; remainder << 1
	set i, c

	set x, c	; x: remainder end
	add x, [c]

:remainder_shift_loop
	shl [i+1], 1
	ifn i, c
		bor [i], ex

	add i, 1
	ifn i, x
		set pc, remainder_shift_loop

	; quotient << 1 (roll carry to remainder lsb)
	set i, a

	set j, a	; j: quotient_divident end
	add j, [a]

:quotient_shift_loop
	shl [i+1], 1
	ife i, a
		bor [x], ex
	ifn i, a
		bor [i], ex

	add i, 1
	ifn i, j
		set pc, quotient_shift_loop

	; if remainder < divisor: loop
	set i, c
	set j, b

:division_cmp_loop
	sti x, x
	ifl [i], [j]
		set pc, division_loop

	ife [i], [j]
		ifn i, x
			set pc, division_cmp_loop

	; remainder -= divisor	
	set i, c
	add i, [c]

	set j, b
	add j, [b]

:division_subtract_loop
	sbx [i], [j]
	std x, x
	ifn i, c
		set pc, division_subtract_loop

	; set quotient lsb=1
	set x, a
	add x, [a]
	bor [x], 1
	set pc, division_loop

:division_finish
	set push, [z+-1]
	jsr int_normalize
	set [z+-1], x

	set push, [z+-3]
	jsr int_normalize
	set [z+-3], x

	; figure out signs
	set i, [z+11]
	set i, [i]
	set i, [i+1]
	
	set j, [z+10]
	set j, [j]
	set j, [j+1]
	
	xor i, j

	ifc i, 0x8000
		set pc, division_set_modulo_sign

	; negate quotient and invert modulo
	set push, [z+-1]
	jsr int_negate
	set [z+-1], x

	set push, [z+-2]
	set push, [z+-3]
	jsr int_sub
	set [z+-3], x

:division_set_modulo_sign
	ifc j, 0x8000
		set pc, division_return_tuple

	set push, [z+-3]
    jsr int_negate
    set [z+-3], x

:division_return_tuple
	; finally create result tuple
	set push, 2
	set push, TYPE_TUPLE
	jsr alloc
	
	set a, [x]

	set [a], 2
	set [a+1], [z+-1]
	set [a+2], [z+-3]
	
	jsr postamble

;----------------------------------------------------------------
; struct handle *int_normalize(struct handle *integer)
;----------------------------------------------------------------
:int_normalize
	set push, 1
	set push, 1
	jsr preamble

	set b, [z+10]
	set a, [b]	; a: struct int *
	
	set i, a	; i: msw *
	add a, [a]	; a: lsw *

:int_normalize_count_loop
	add i, 1

	ife i, a
		set pc, int_normalize_count_break

	ife [i], 0xffff
		ifb [i+1], 0x8000
			set pc, int_normalize_count_loop

	ife [i], 0x0000
		ifc [i+1], 0x8000
			set pc, int_normalize_count_loop
	
:int_normalize_count_break
	add a, 1
	set c, a
	sub c, i

	sub i, [b]

	set x, b
	set b, [b]
	ife [b + INT_LEN], c
		jsr postamble
	
	set push, c
	jsr int_create
	set [z+-1], x

	set a, [z+10]
	set a, [a]
	add i, a
	add a, [a]	
	add a, 1

	set j, [x]	; struct int *new
	add j, 1	; msw *

:int_normalize_copy_loop
	sti [j], [i]				
	ifn i, a
		set pc, int_normalize_copy_loop

	jsr postamble

;----------------------------------------------------------------
; struct handle *int_extend(struct handle *integer, uint len)
; extend always return different object
;----------------------------------------------------------------
:int_extend
	set push, 2
	set push, 1
	jsr preamble

	set push, [z+10]
	jsr int_create	
	set [z+-1], x

	set b, [x]		; b: struct int *new
	set j, b		; j: new lsw
	add j, [b]

	set a, [z+11]	; struct handle *
	set a, [a]		; struct int *

	set i, a
	add i, [a]		; i: orig lsw

:int_extend_copy_loop
	std [j], [i]
	ife j, b
		jsr postamble
	ifn i, a
		set pc, int_extend_copy_loop

	set c, [i+1]
	asr c, 15
	
:int_extend_fill_loop
	std [j], c
	ifn j, b
		set pc, int_extend_fill_loop

	jsr postamble

