:interpreter_main
	set push, 0
	set push, 4
	jsr preamble
	
	set [recovery_fp], z
	set [recovery_sp], sp

	jsr detect_hardware
	jsr screen_select
	jsr screen_clear

	set push, 10
	set push, TYPE_DICT
	jsr alloc
	set [z-1], x

	set [global_scope], x
	set [current_scope], x

	set push, 20
	set push, TYPE_LIST
	jsr alloc
	set [z-4], x
	
	set [builtin], x

	; init fpu
	jsr float_init	

	set push, STR_STARTUP
	jsr print

	set push, STR_STARTUP2
	jsr print
	
	jsr mark
	jsr compact

	set a, [heap_handle_start]
	sub a, [heap_free_start]
	
	set push, a
	jsr uint16_to_int
	
	set push, x
	jsr print

	set push, STR_STARTUP3
	jsr print

:interpreter_loop
	set push, STR_PROMPT
	jsr raw_input
    set [z-2], x
	
	set c, 10
	jsr screen_add_char
	
	jsr lexer_init

:interpreter_loop_parse
	jsr parser_stmt
    set [z-3], x

	ife [lexer_token], token_eof
		set pc, interpreter_loop

	ife [x+1], TYPE_NONE
		set pc, interpreter_loop_parse

	set push, x
	jsr eval
    set [z-3], x

	set push, x
	jsr print_repr

	set c, 10
	jsr screen_add_char
	
	set pc, interpreter_loop_parse

;----------------------------------------------------------------
; struct handle *scope_get(struct handle *dict, struct handle *key)
; return value from scope or any of the ancestor scopes
;----------------------------------------------------------------
:scope_get
	set push, 2
	set push, 0
	jsr preamble
	
	set push, [z+11]
	set push, [z+10]
	jsr dict_get
	
	ifn x, 0
		jsr postamble
		
	set push, [z+11]
	set push, STR_UNDERSCORE
	jsr dict_get
	
	ife x, 0
		jsr postamble
		
	set push, x
	set push, [z+10]
	jsr scope_get
	
	jsr postamble
	
;----------------------------------------------------------------
; void scope_del(struct handle *dict, struct handle *key)
; delete value from scope or closest ancestor scope
;----------------------------------------------------------------
:scope_del
	set push, 2
	set push, 0
	jsr preamble
	
	set push, [z+11]
	set push, [z+10]
	jsr dict_del
	
	ifn x, 0
		jsr postamble
		
	set push, [z+11]
	set push, STR_UNDERSCORE
	jsr dict_get
	
	ife x, 0
		jsr recover
		
	set push, x
	set push, [z + 10]
	jsr scope_del
	
	jsr postamble
	
;----------------------------------------------------------------
; void scope_set(struct handle *dict, struct handle *key, struct handle *value, uint16 mode)
; mode: SCOPE_MODE_UPDATE | SCOPE_MODE_INSERT
;----------------------------------------------------------------
:scope_set
	set push, 4
	set push, 0
	jsr preamble	

	set push, [z+13]
	set push, [z+12]
	jsr dict_get
	
	ifn x, 0
		set pc, scope_set_insert
		
	set push, [z+13]
	set push, STR_UNDERSCORE
	jsr dict_get
	
	ife x, 0							; no parent found
		set pc, scope_set_no_parent

	; parent found
	set push, x							; call parent
	set push, [z+12]					; key
	set push, [z+11]					; value
	set push, SCOPE_MODE_UPDATE
	jsr scope_set
	
	ifn x, 0
		jsr postamble

:scope_set_no_parent
	ife [z+10], SCOPE_MODE_UPDATE
		jsr postamble

:scope_set_insert
	set push, [z+13]
	set push, [z+12]
	set push, [z+11]
	jsr dict__set

	set x, 1
	jsr postamble
	
;----------------------------------------------------------------
:recover
; fastcall
;----------------------------------------------------------------
	set a, pop
	set z, [recovery_fp]
	set sp, [recovery_sp]

	set [current_scope], [global_scope]

	set push, STR_ERROR
	jsr print

	set push, a
	jsr debug
	
	set c, 10
	jsr screen_add_char

	jsr lexer__get_line
	set push, x
	jsr print

	set c, 10
	jsr screen_add_char

	jsr lexer__get_token_marker
	set push, x
	jsr print
	
	set c, 10
	jsr screen_add_char

	set pc, interpreter_loop

